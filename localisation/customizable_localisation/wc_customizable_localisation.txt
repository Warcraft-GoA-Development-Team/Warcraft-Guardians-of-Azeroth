defined_text = {
	name = GetAltSocietyRankUpTooltip

	text = {
		trigger = {
			society_member_of = cenarion_circle
			society_rank == 1
		}
		localisation_key = GetCCSocietyRankUpTooltip_Rank1
	}
	text = {
		trigger = {
			society_member_of = cenarion_circle
			society_rank == 2
		}
		localisation_key = GetCCSocietyRankUpTooltip_Rank2
	}
	text = {
		trigger = {
			society_member_of = cenarion_circle
			society_rank == 3
		}
		localisation_key = GetCCSocietyRankUpTooltip_Rank3
	}
	text = {
		trigger = {
			society_member_of = sisterhood_of_elune
			society_rank == 1
		}
		localisation_key = GetSOESocietyRankUpTooltip_Rank1
	}
	text = {
		trigger = {
			society_member_of = sisterhood_of_elune
			society_rank == 2
		}
		localisation_key = GetSOESocietyRankUpTooltip_Rank2
	}
	text = {
		trigger = {
			society_member_of = sisterhood_of_elune
			society_rank == 3
		}
		localisation_key = GetSOESocietyRankUpTooltip_Rank3
	}
}
defined_text = {	# Gets adjective depends on religion
	name = GetRelAdjective
	
	text = {
		trigger = { dark_public_religion_trigger = yes }
		localisation_key = GetRelAdjective_Unholy
	}
	text = {
		trigger = {
			dark_public_religion_trigger = no
			secular_public_religion_trigger = yes
		}
		localisation_key = GetRelAdjective_Wise
	}
	fallback_text = {
		localisation_key = GetRelAdjective_Holy
	}
}
defined_text = {	# Gets title of religious head (when religious head isn't created yet)
	name = GetRelHeadTitle
	
	text = {
		trigger = { religion = old_ways }
		localisation_key = GetRelHeadTitle_old_ways
	}
	text = {
		trigger = { religion = ursine }
		localisation_key = GetRelHeadTitle_ursine
	}
	text = {
		trigger = { religion = cult_of_loa }
		localisation_key = GetRelHeadTitle_cult_of_loa
	}
	text = {
		trigger = { religion = cult_of_hakkar }
		localisation_key = GetRelHeadTitle_cult_of_hakkar
	}
	text = {
		trigger = { religion = orcish_shamanism }
		localisation_key = GetRelHeadTitle_orcish_shamanism
	}
	text = {
		trigger = { religion = shamanism }
		localisation_key = GetRelHeadTitle_shamanism
	}
	text = {
		trigger = { religion = earth_mother_worship }
		localisation_key = GetRelHeadTitle_earth_mother_worship
	}
	text = {
		trigger = { religion = voidfarer }
		localisation_key = GetRelHeadTitle_voidfarer
	}
	text = {
		trigger = { religion = forsaken_cult }
		localisation_key = GetRelHeadTitle_forsaken_cult
	}
	text = {
		trigger = { religion = lightbound }
		localisation_key = GetRelHeadTitle_lightbound
	}
	text = {
		trigger = { religion = throsic }
		localisation_key = GetRelHeadTitle_throsic
	}
}
# Only warcraft-related diseases
defined_text = {
	name = GetDiagnosis
	
	# Warcraft diseases
	text = {
		trigger = {
			OR = {
				has_character_flag = EVTDESC_RIP_11045_plague_of_undeath_flag
				has_character_flag = EVTDESC_RIP_11045_plague_of_undeath_flag_horse
				has_character_flag = EVTDESC_RIP_11045_plague_of_undeath_flag_certain
				has_character_flag = EVTDESC_RIP_11045_plague_of_undeath_flag_sure
				has_character_flag = EVTDESC_RIP_11045_plague_of_undeath_flag_uncertain
			}
		}
		localisation_key = String_the_Plague
	}
	text = {
		trigger = {
			OR = {
				has_character_flag = announce_corrupted_blood
				
				has_character_flag = EVTDESC_RIP_11045_corrupted_blood_flag
				has_character_flag = EVTDESC_RIP_11045_corrupted_blood_flag_horse
				has_character_flag = EVTDESC_RIP_11045_corrupted_blood_flag_certain
				has_character_flag = EVTDESC_RIP_11045_corrupted_blood_flag_sure
				has_character_flag = EVTDESC_RIP_11045_corrupted_blood_flag_uncertain
			}
		}
		localisation_key = String_corrupted_blood
	}
	
	# Vanilla diseases
	text = {
		trigger = {
			OR = {
				has_character_flag = announce_pneumonic
				
				has_character_flag = EVTDESC_RIP_11045_has_pneumonia_flag
				has_character_flag = EVTDESC_RIP_11045_has_pneumonia_flag_horse
				has_character_flag = EVTDESC_RIP_11045_has_pneumonia_flag_certain
				has_character_flag = EVTDESC_RIP_11045_has_pneumonia_flag_sure
				has_character_flag = EVTDESC_RIP_11045_has_pneumonia_flag_uncertain
			}
		}
		localisation_key = string_pneumonia
	}
	text = {	# Devouring Plague
		trigger = {
			OR = {
				has_character_flag = announce_syphilis
				
				has_character_flag = EVTDESC_RIP_11045_has_syphilis_flag
				has_character_flag = EVTDESC_RIP_11045_has_syphilis_flag_horse
				has_character_flag = EVTDESC_RIP_11045_has_syphilis_flag_certain
				has_character_flag = EVTDESC_RIP_11045_has_syphilis_flag_sure
				has_character_flag = EVTDESC_RIP_11045_has_syphilis_flag_uncertain
			}
		}
		localisation_key = String_syphilis
	}
	text = {	# Blood Plague
		trigger = {
			OR = {
				has_character_flag = announce_tuberculosis
				
				has_character_flag = EVTDESC_RIP_11045_has_tuberculosis_flag
				has_character_flag = EVTDESC_RIP_11045_has_tuberculosis_flag_horse
				has_character_flag = EVTDESC_RIP_11045_has_tuberculosis_flag_certain
				has_character_flag = EVTDESC_RIP_11045_has_tuberculosis_flag_sure
				has_character_flag = EVTDESC_RIP_11045_has_tuberculosis_flag_uncertain
			}
		}
		localisation_key = String_consumption
	}
	text = {	# Frost Fever
		trigger = {
			OR = {
				has_character_flag = announce_typhoi
				
				has_character_flag = EVTDESC_RIP_11045_has_typhoid_fever_flag
				has_character_flag = EVTDESC_RIP_11045_has_typhoid_fever_flag_horse
				has_character_flag = EVTDESC_RIP_11045_has_typhoid_fever_flag_certain
				has_character_flag = EVTDESC_RIP_11045_has_typhoid_fever_flag_sure
				has_character_flag = EVTDESC_RIP_11045_has_typhoid_fever_flag_uncertain
			}
		}
		localisation_key = String_slow_fever
	}
	text = {	# Ebon Plague
		trigger = {
			OR = {
				has_character_flag = announce_typhus
				
				has_character_flag = EVTDESC_RIP_11045_has_typhus_flag
				has_character_flag = EVTDESC_RIP_11045_has_typhus_flag_horse
				has_character_flag = EVTDESC_RIP_11045_has_typhus_flag_certain
				has_character_flag = EVTDESC_RIP_11045_has_typhus_flag_sure
				has_character_flag = EVTDESC_RIP_11045_has_typhus_flag_uncertain
			}
		}
		localisation_key = String_camp_fever
	}
	text = {
		trigger = {
			OR = {
				has_character_flag = announce_plague
				
				has_character_flag = EVTDESC_RIP_11045_has_bubonic_plague_flag
				has_character_flag = EVTDESC_RIP_11045_has_bubonic_plague_flag_horse
				has_character_flag = EVTDESC_RIP_11045_has_bubonic_plague_flag_certain
				has_character_flag = EVTDESC_RIP_11045_has_bubonic_plague_flag_sure
				has_character_flag = EVTDESC_RIP_11045_has_bubonic_plague_flag_uncertain
			}
		}
		localisation_key = String_the_Plague
	}
	text = {
		trigger = {
			OR = {
				has_character_flag = announce_measles
				
				has_character_flag = EVTDESC_RIP_11045_has_measles_flag
				has_character_flag = EVTDESC_RIP_11045_has_measles_flag_horse
				has_character_flag = EVTDESC_RIP_11045_has_measles_flag_certain
				has_character_flag = EVTDESC_RIP_11045_has_measles_flag_sure
				has_character_flag = EVTDESC_RIP_11045_has_measles_flag_uncertain
			}
		}
		localisation_key = String_measles
	}
	text = {
		trigger = {
			OR = {
				has_character_flag = announce_smallpox
				
				has_character_flag = EVTDESC_RIP_11045_has_small_pox_flag
				has_character_flag = EVTDESC_RIP_11045_has_small_pox_flag_horse
				has_character_flag = EVTDESC_RIP_11045_has_small_pox_flag_certain
				has_character_flag = EVTDESC_RIP_11045_has_small_pox_flag_sure
				has_character_flag = EVTDESC_RIP_11045_has_small_pox_flag_uncertain
			}
		}
		localisation_key = String_smallpox
	}
	text = {
		trigger = {
			OR = {
				has_character_flag = announce_syphilis
				
				has_character_flag = EVTDESC_RIP_11045_has_aztec_disease_flag
				has_character_flag = EVTDESC_RIP_11045_has_aztec_disease_flag_horse
				has_character_flag = EVTDESC_RIP_11045_has_aztec_disease_flag_certain
				has_character_flag = EVTDESC_RIP_11045_has_aztec_disease_flag_sure
				has_character_flag = EVTDESC_RIP_11045_has_aztec_disease_flag_uncertain
			}
		}
		localisation_key = String_syphilis
	}
	text = {
		trigger = {
			OR = {
				has_character_flag = announce_flu
				
				has_character_flag = EVTDESC_RIP_11045_has_flu_flag
				has_character_flag = EVTDESC_RIP_11045_has_flu_flag_horse
				has_character_flag = EVTDESC_RIP_11045_has_flu_flag_certain
				has_character_flag = EVTDESC_RIP_11045_has_flu_flag_sure
				has_character_flag = EVTDESC_RIP_11045_has_flu_flag_uncertain
			}
		}
		localisation_key = String_flu
	}
	text = {
		trigger = {
			OR = {
				has_character_flag = announce_dysentery
				
				has_character_flag = EVTDESC_RIP_11045_has_dysentery_flag
				has_character_flag = EVTDESC_RIP_11045_has_dysentery_flag_horse
				has_character_flag = EVTDESC_RIP_11045_has_dysentery_flag_certain
				has_character_flag = EVTDESC_RIP_11045_has_dysentery_flag_sure
				has_character_flag = EVTDESC_RIP_11045_has_dysentery_flag_uncertain
			}
		}
		localisation_key = String_dysentery
	}
	text = {
		trigger = {
			OR = {
				has_character_flag = announce_gout
				
				has_character_flag = EVTDESC_RIP_11045_has_gout_flag
				has_character_flag = EVTDESC_RIP_11045_has_gout_flag_horse
				has_character_flag = EVTDESC_RIP_11045_has_gout_flag_certain
				has_character_flag = EVTDESC_RIP_11045_has_gout_flag_sure
				has_character_flag = EVTDESC_RIP_11045_has_gout_flag_uncertain
			}
		}
		localisation_key = String_gout
	}
	text = {
		trigger = {
			OR = {
				has_character_flag = announce_food_poisoning
				
				has_character_flag = EVTDESC_RIP_11045_has_food_poisoning_flag
				has_character_flag = EVTDESC_RIP_11045_has_food_poisoning_flag_horse
				has_character_flag = EVTDESC_RIP_11045_has_food_poisoning_flag_certain
				has_character_flag = EVTDESC_RIP_11045_has_food_poisoning_flag_sure
				has_character_flag = EVTDESC_RIP_11045_has_food_poisoning_flag_uncertain
			}
		}
		localisation_key = String_food_poisoning
	}
	text = {
		trigger = {
			OR = {
				has_character_flag = announce_rabies
				
				has_character_flag = EVTDESC_RIP_11045_has_rabies_flag
				has_character_flag = EVTDESC_RIP_11045_has_rabies_flag_horse
				has_character_flag = EVTDESC_RIP_11045_has_rabies_flag_certain
				has_character_flag = EVTDESC_RIP_11045_has_rabies_flag_sure
				has_character_flag = EVTDESC_RIP_11045_has_rabies_flag_uncertain
			}
		}
		localisation_key = String_rabies
	}
	text = {
		trigger = {
			OR = {
				has_character_flag = announce_cancer
				
				has_character_flag = EVTDESC_RIP_11045_has_cancer_flag
				has_character_flag = EVTDESC_RIP_11045_has_cancer_flag_horse
				has_character_flag = EVTDESC_RIP_11045_has_cancer_flag_certain
				has_character_flag = EVTDESC_RIP_11045_has_cancer_flag_sure
				has_character_flag = EVTDESC_RIP_11045_has_cancer_flag_uncertain
			}
		}
		localisation_key = String_Cancer
	}
}

# Gets name of faction
defined_text = {
	name = GetFactionName
	
	text = {
		trigger = {
			OR = {
				is_member_of_horde_faction_trigger = yes
				top_liege = { is_member_of_horde_faction_trigger = yes }
			}
		}
		localisation_key = GetFactionName_Horde
	}
	text = {
		trigger = {
			OR = {
				has_character_flag = mention_alliance_flag # Forces event to mention alliance
				is_member_of_alliance_faction_trigger = yes
				top_liege = { is_member_of_alliance_faction_trigger = yes }
			}
		}
		localisation_key = GetFactionName_Alliance
	}
	fallback_text = {
		localisation_key = GetFactionName_Azeroth
	}
}

# Gets Hide/Show depending on flag
defined_text = {
	name = GetHideShow
	
	text = {
		trigger = { has_character_flag = hide_class_training_decisions_flag }
		localisation_key = GetHideShow_Show
	}
	fallback_text = {
		localisation_key = GetHideShow_Hide
	}
}

# Gets society greeting # Also, don't forget to check GetMOGreeting
defined_text = {
	name = GetSocietyGreeting
	
	text = {
		trigger = { society_member_of = cenarion_circle }
		localisation_key = GetSocietyGreeting_cenarion_circle
	}
	text = {
		trigger = { society_member_of = sisterhood_of_elune }
		localisation_key = GetSocietyGreeting_sisterhood_of_elune
	}
}
# Gets society goal
defined_text = {
	name = GetSocietyGoal
	
	text = {
		trigger = { society_member_of = cenarion_circle }
		localisation_key = GetSocietyGoal_cenarion_circle
	}
	text = {
		trigger = { society_member_of = sisterhood_of_elune }
		localisation_key = GetSocietyGoal_sisterhood_of_elune
	}
}
# Gets society farewell # Also, don't forget to check GetMOFarewell
defined_text = {
	name = GetSocietyFarewell
	
	text = {
		trigger = { society_member_of = cenarion_circle }
		localisation_key = GetSocietyFarewell_cenarion_circle
	}
	text = {
		trigger = { society_member_of = sisterhood_of_elune }
		localisation_key = GetSocietyFarewell_sisterhood_of_elune
	}
}

# Gets Elune/Light depending on religion
defined_text = {
	name = GetEluneLight
	
	text = {
		trigger = { religion = kaldorei_religion }
		localisation_key = GOD_ELUNE
	}
	fallback_text = {
		localisation_key = LIGHT
	}
}
# Gets Elune/the Light depending on religion
defined_text = {
	name = GetEluneTheLight
	
	text = {
		trigger = { religion = kaldorei_religion }
		localisation_key = GOD_ELUNE
	}
	fallback_text = {
		localisation_key = THE_LIGHT
	}
}
# Gets Elune/The Light depending on religion
defined_text = {
	name = GetEluneTheLightCap
	
	text = {
		trigger = { religion = kaldorei_religion }
		localisation_key = GOD_ELUNE
	}
	fallback_text = {
		localisation_key = GetEluneTheLightCap_The_Light
	}
}
# Gets the Holy Light/the Moonlight depending on religion
defined_text = {
	name = GetLightType
	
	text = {
		trigger = { religion = kaldorei_religion }
		localisation_key = GetLightType_the_Moonlight
	}
	fallback_text = {
		localisation_key = THE_LIGHT
	}
}
# Gets Her/Its depending on religion
defined_text = {
	name = GetHerItsCap
	
	text = {
		trigger = { religion = kaldorei_religion }
		localisation_key = GetPronoun_Her
	}
	fallback_text = {
		localisation_key = GetPronoun_Its
	}
}

defined_text = {
	name = GetInviteStudentSocietyName

	text = {
		trigger = {
			society_member_of = cenarion_circle
		}
		localisation_key = GetCCInviteStudentSocietyName
	}
	text = {
		trigger = {
			society_member_of = sisterhood_of_elune
		}
		localisation_key = GetSOEInviteStudentSocietyName
	}
}
defined_text = {
	name = GetInviteStudentSocietyNameDesc

	text = {
		trigger = {
			society_member_of = cenarion_circle
		}
		localisation_key = GetCCInviteStudentSocietyNameDesc
	}
	text = {
		trigger = {
			society_member_of = sisterhood_of_elune
		}
		localisation_key = GetSOEInviteStudentSocietyNameDesc
	}
}
defined_text = {
	name = GetTrainClassSocietyName

	text = {
		trigger = {
			society_member_of = cenarion_circle
		}
		localisation_key = GetCCTrainClassSocietyName
	}
	text = {
		trigger = {
			society_member_of = sisterhood_of_elune
		}
		localisation_key = GetSOETrainClassSocietyName
	}
}
defined_text = {
	name = GetTrainClassSocietyNameDesc

	text = {
		trigger = {
			society_member_of = cenarion_circle
		}
		localisation_key = GetCCTrainClassSocietyNameDesc
	}
	text = {
		trigger = {
			society_member_of = sisterhood_of_elune
		}
		localisation_key = GetSOETrainClassSocietyNameDesc
	}
}

# Get horses/racial mounts depending on culture
defined_text = {
	name = GetHorses

	text = {
		trigger = {
			culture = night_elf
			}
		localisation_key = GetHorses_saber_cats
	}
	text = {
		trigger = {
			culture_group = orc_group
		}
		localisation_key = GetHorses_wolves
	}
	text = {
		trigger = {
			culture_group = tauren_group
		}
		localisation_key = GetHorses_kodo
	}
	text = {
		trigger = {
			culture_group = troll_group
		}
		localisation_key = GetHorses_raptors
	}
	fallback_text = {
		localisation_key = GetHorses_horses
	}
}

# Gets "dinner and plenty of drinks"/"a meeting" depending on can_be_drunkard_trigger
defined_text = {
	name = GetDinnerAndDrinks

	text = {
		trigger = {
			can_drink_alcohol_trigger = yes
		}
		localisation_key = GetDinnerAndDrinks_dinner_and_drinks
	}
	fallback_text = {
		localisation_key = GetDinnerAndDrinks_meeting
	}
}

defined_text = {
	name = GetInfantryCommanderType

	text = {
		trigger = { evil_public_religion_trigger = yes }
		localisation_key = GetInfantryCommanderType_Evil
	}
	fallback_text = {
		localisation_key = GetInfantryCommanderType_Normal
	}
}
defined_text = {
	name = GetTaskmasterType

	text = {
		trigger = { evil_public_religion_trigger = yes }
		localisation_key = GetTaskmasterType_Evil
	}
	fallback_text = {
		localisation_key = GetTaskmasterType_Normal
	}
}

# Buldings
defined_text = {
	name = GetMineralCap
	
	use_first_valid = yes

	text = {
		trigger = { religion_group = necromancy_group }
		localisation_key = GetMineralCap_Saronite
	}
	text = {
		trigger = { religion_group = fel_group }
		localisation_key = GetMineralCap_Black
	}
	text = {
		trigger = { religion = old_gods_worship }
		localisation_key = GetMineralCap_Elementium
	}
	fallback_text = {
		localisation_key = GetMineralCap_Stone
	}
}
defined_text = {
	name = GetMineral
	
	use_first_valid = yes

	text = {
		trigger = { religion_group = necromancy_group }
		localisation_key = GetMineral_saronite
	}
	text = {
		trigger = { religion_group = fel_group }
		localisation_key = GetMineral_black
	}
	text = {
		trigger = { religion = old_gods_worship }
		localisation_key = GetMineral_elementium
	}
	fallback_text = {
		localisation_key = GetMineral_stone
	}
}
defined_text = {
	name = GetCastleAdjectiveCap
	
	use_first_valid = yes

	text = {
		trigger = { religion_group = necromancy_group }
		localisation_key = GetAdjectiveCap_Undead
	}
	text = {
		trigger = { religion_group = fel_group }
		localisation_key = GetAdjectiveCap_Demonic
	}
	text = {
		trigger = { religion = old_gods_worship }
		localisation_key = GetAdjectiveCap_Zealot
	}
	fallback_text = {
		localisation_key = GetAdjectiveCap_Castle
	}
}
defined_text = {
	name = GetCastleAdjective
	
	use_first_valid = yes

	text = {
		trigger = { religion_group = necromancy_group }
		localisation_key = GetAdjective_undead
	}
	text = {
		trigger = { religion_group = fel_group }
		localisation_key = GetAdjective_demonic
	}
	text = {
		trigger = { religion = old_gods_worship }
		localisation_key = GetAdjective_zealot
	}
	fallback_text = {
		localisation_key = GetAdjective_castle
	}
}
defined_text = {
	name = GetCityAdjectiveCap
	
	use_first_valid = yes

	text = {
		trigger = { religion_group = necromancy_group }
		localisation_key = GetAdjectiveCap_Undead
	}
	text = {
		trigger = { religion_group = fel_group }
		localisation_key = GetAdjectiveCap_Demonic
	}
	text = {
		trigger = { religion = old_gods_worship }
		localisation_key = GetAdjectiveCap_Zealot
	}
	fallback_text = {
		localisation_key = GetAdjectiveCap_City
	}
}
defined_text = {
	name = GetCityAdjective
	
	use_first_valid = yes

	text = {
		trigger = { religion_group = necromancy_group }
		localisation_key = GetAdjective_undead
	}
	text = {
		trigger = { religion_group = fel_group }
		localisation_key = GetAdjective_demonic
	}
	text = {
		trigger = { religion = old_gods_worship }
		localisation_key = GetAdjective_zealot
	}
	fallback_text = {
		localisation_key = GetAdjective_city
	}
}
defined_text = {
	name = GetStableTypeCap
	
	use_first_valid = yes

	text = {
		trigger = { culture_group = orc_group }
		localisation_key = GetAdjectiveCap_Wolf
	}
	text = {
		trigger = { culture_group = troll_group }
		localisation_key = GetAdjectiveCap_Raptor
	}
	text = {
		trigger = { culture = night_elf }
		localisation_key = GetAdjectiveCap_Panther
	}
	text = {
		trigger = { religion_group = necromancy_group }
		localisation_key = GetAdjectiveCap_Undead
	}
	text = {
		trigger = { religion_group = fel_group }
		localisation_key = GetAdjectiveCap_Demonic
	}
	text = {
		trigger = { religion = old_gods_worship }
		localisation_key = GetAdjectiveCap_Dark
	}
	fallback_text = {
		localisation_key = GetAdjectiveCap_Horse
	}
}
defined_text = {
	name = GetStableType
	
	use_first_valid = yes

	text = {
		trigger = { culture_group = orc_group }
		localisation_key = GetAdjective_wolf
	}
	text = {
		trigger = { culture_group = troll_group }
		localisation_key = GetAdjective_raptor
	}
	text = {
		trigger = { culture = night_elf }
		localisation_key = GetAdjective_panther
	}
	text = {
		trigger = { religion_group = necromancy_group }
		localisation_key = GetAdjective_undead
	}
	text = {
		trigger = { religion_group = fel_group }
		localisation_key = GetAdjective_demonic
	}
	text = {
		trigger = { religion = old_gods_worship }
		localisation_key = GetAdjective_dark
	}
	fallback_text = {
		localisation_key = GetAdjective_horse
	}
}
defined_text = {
	name = GetPeasantsType
	
	use_first_valid = yes

	text = {
		trigger = { culture_group = orc_group }
		localisation_key = GetPeasantsType_peons
	}
	text = {
		trigger = { dark_public_religion_trigger = yes }
		localisation_key = GetPeasantsType_acolytes
	}
	text = {
		trigger = { culture_group = human_group }
		localisation_key = GetPeasantsType_peasants
	}
	fallback_text = {
		localisation_key = GetPeasantsType_workers
	}
}
defined_text = {
	name = GetPeasantType
	
	use_first_valid = yes

	text = {
		trigger = { culture_group = orc_group }
		localisation_key = GetPeasantType_peon
	}
	text = {
		trigger = { dark_public_religion_trigger = yes }
		localisation_key = GetPeasantType_acolyte
	}
	text = {
		trigger = { culture_group = human_group }
		localisation_key = GetPeasantsType_peasant
	}
	fallback_text = {
		localisation_key = GetPeasantsType_worker
	}
}
defined_text = {
	name = GetCattlesType
	
	use_first_valid = yes
	
	text = {
		trigger = {
			OR = {
				culture_group = orc_group
				culture_group = human_group
			}
		}
		localisation_key = GetCattlesType_pigs
	}
	fallback_text = {
		localisation_key = GetCattlesType_livestock
	}
}
defined_text = {
	name = GetMilitiaTypeCap
	
	use_first_valid = yes

	text = {
		trigger = { culture_group = orc_group }
		localisation_key = GetAdjective_Peon
	}
	text = {
		trigger = { dark_public_religion_trigger = yes }
		localisation_key = GetAdjective_Acolyte
	}
	fallback_text = {
		localisation_key = GetAdjective_Militia
	}
}
defined_text = {
	name = GetGuardPurpose
	
	use_first_valid = yes

	text = {
		trigger = { dark_public_religion_trigger = yes }
		localisation_key = GetGuardPurpose_Deviant
	}
	fallback_text = {
		localisation_key = GetGuardPurpose_Law
	}
}
defined_text = {
	name = GetMarketplaceCap
	
	use_first_valid = yes

	text = {
		trigger = { dark_public_religion_trigger = yes }
		localisation_key = GetMarketplaceCap_Dark_Quarter
	}
	fallback_text = {
		localisation_key = GetMarketplaceCap_Trade_District
	}
}
defined_text = {
	name = GetMarketplacePurpose
	
	use_first_valid = yes

	text = {
		trigger = { evil_public_religion_trigger = yes }
		localisation_key = GetMarketplacePurpose_Rituals
	}
	fallback_text = {
		localisation_key = GetMarketplacePurpose_Trade
	}
}
defined_text = {
	name = GetUniversityCap
	
	use_first_valid = yes

	text = {
		trigger = { dark_public_religion_trigger = yes }
		localisation_key = GetUniversityCap_Laboratory
	}
	fallback_text = {
		localisation_key = GetUniversityCap_University
	}
}
defined_text = {
	name = GetUniversityPurpose
	
	use_first_valid = yes

	text = {
		trigger = { dark_public_religion_trigger = yes }
		localisation_key = GetUniversityPurpose_Experiments
	}
	fallback_text = {
		localisation_key = GetUniversityPurpose_Admission
	}
}
defined_text = {
	name = GetSpiritual
	
	use_first_valid = yes

	text = {
		trigger = { secular_public_religion_trigger = no }
		localisation_key = GetSpiritual_spiritual
	}
	text = {
		trigger = { evil_public_religion_trigger = no }
		localisation_key = GetSpiritual_cultural
	}
	fallback_text = {
		localisation_key = GetSpiritual_important
	}
}
defined_text = {
	name = GetCommunity
	
	use_first_valid = yes

	text = {
		trigger = { dark_public_religion_trigger = yes }
		localisation_key = GetCommunity_cult
	}
	fallback_text = {
		localisation_key = GetCommunity_community
	}
}

# Gets commander/schemer/scholar depending on target of quest_control_mind
defined_text = {
	name = GetTargetGenetic

	text = {
		trigger = {
			OR = {
				has_character_flag = turn_into_undead_smart_flag
				has_character_flag = control_mind_smart_flag
			}
		}
		localisation_key = GetTargetGenetic_smart
	}
	text = {
		trigger = {
			OR = {
				has_character_flag = turn_into_undead_strong_flag
				has_character_flag = control_mind_strong_flag
			}
		}
		localisation_key = GetTargetGenetic_strong
	}
	fallback_text = {
		localisation_key = GetTargetGenetic_fair
	}
}

### Gets Leave if you're not Horde leader, gets Disband if you're
# Capital
defined_text = {
	name = GetLeaveDisbandCap

	text = {
		trigger = {
			trait = leader_of_horde_trait
		}
		localisation_key = GetLeaveDisbandCap_Disband
	}
	fallback_text = {
		localisation_key = GetLeaveDisbandCap_Leave
	}
}
# Lower
defined_text = {
	name = GetLeaveDisband

	text = {
		trigger = {
			trait = leader_of_horde_trait
		}
		localisation_key = GetLeaveDisband_disband
	}
	fallback_text = {
		localisation_key = GetLeaveDisband_leave
	}
}

# Champion event chain: mention important character you killed
defined_text = {
	name = GetChampionKilledCharacter

	text = {
		trigger = { event_target:target_killed_character = { character = yes } }
		localisation_key = GetChampionKilledCharacter_target
	}
	fallback_text = {
		localisation_key = GetChampionKilledCharacter_mentors
	}
}
# Mentions you feel the guilty of someone's death
defined_text = {
	name = GetChampionGuilt

	text = {
		trigger = { event_target:target_killed_character = { character = yes } }
		localisation_key = GetChampionGuilt_guilty
	}
	fallback_text = {
		localisation_key = ""
	}
}

# Gets hospital building/temple building based on DLCs you have
defined_text = {
	name = GetHospitalTempleBuilding

	text = {
		trigger = { has_dlc = "Reapers" }
		localisation_key = GetHospitalTempleBuilding_hospital
	}
	fallback_text = {
		localisation_key = GetHospitalTempleBuilding_temple
	}
}

# Gets hospital/temple based on DLCs you have
defined_text = {
	name = GetHospitalTemple

	text = {
		trigger = { has_dlc = "Reapers" }
		localisation_key = GetHospitalTemple_hospital
	}
	fallback_text = {
		localisation_key = GetHospitalTemple_temple
	}
}

### Gets god name depending on character modifier
defined_text = {
	name = GetMainOldGodName

	use_first_valid = yes

	text = {
		trigger = { true_religion = old_gods_worship has_character_modifier = follower_of_cthun }
		localisation_key = GetMainOldGodNameCthun
	}
	text = {
		trigger = { true_religion = old_gods_worship has_character_modifier = follower_of_nzoth }
		localisation_key = GetMainOldGodNameNzoth
	}
	text = {
		trigger = { true_religion = old_gods_worship has_character_modifier = follower_of_yogg_saron }
		localisation_key = GetMainOldGodNameYoggSaron
	}
	text = {
		trigger = { true_religion = old_gods_worship has_character_modifier = follower_of_yshaarj }
		localisation_key = GetMainOldGodNameYshaarj
	}
	text = {
		trigger = { true_religion = old_gods_worship }
		localisation_key = String_Twilight
	}
}

### Used in abduction localization
# Gets in <Your Society> if you have one
defined_text = {
	name = GetInSociety

	text = {
		trigger = { society_can_abduct_trigger = yes }
		localisation_key = GetInSociety_society
	}
	fallback_text = {
		localisation_key = ""
	}
}
# Gets in <Your Society> if you have one, society name is pained in yellow
defined_text = {
	name = GetInSocietyYellow

	text = {
		trigger = { society_can_abduct_trigger = yes }
		localisation_key = GetInSocietyYellow_society
	}
	fallback_text = {
		localisation_key = ""
	}
}
# Gets Society members if you're in society
defined_text = {
	name = GetSocietyMembers

	text = {
		trigger = { society_can_abduct_trigger = yes }
		localisation_key = GetSocietyMembers_society
	}
	fallback_text = {
		localisation_key = GetSocietyMembers_brethren
	}
}
# Gets <Your Society> if you have one or we
defined_text = {
	name = GetSocietyWe

	text = {
		trigger = { society_can_abduct_trigger = yes }
		localisation_key = GetSocietyWe_society
	}
	fallback_text = {
		localisation_key = GetSocietyWe_we
	}
}

# Gets a monstrous undead name depending on followed religion
defined_text = {
	name = GetMonstrousUndeadName
	
	use_first_valid = yes
	
    text = {
        trigger = { religion = throsic }
        localisation_key = GetMonstrousUndeadName_WickerGolem
    }
    fallback_text = { localisation_key = GetMonstrousUndeadName_Abomination }
}

# Gets a monstrous undead description depending on followed religion
defined_text = {
	name = GetMonstrousUndeadNameDesc
	
	use_first_valid = yes
	
    text = {
        trigger = { religion = throsic }
        localisation_key = GetMonstrousUndeadNameDesc_WickerGolem
    }
    fallback_text = { localisation_key = GetMonstrousUndeadNameDesc_Abomination }
}

# Used in plot events
# Gets type of your highwaymen
defined_text = {
	name = GetHighwaymenType
	
	use_first_valid = yes

	text = {
		trigger = {
			tier = EMPEROR
			has_character_flag = adventurers_easter_egg_flag
		}
		localisation_key = GetHighwaymenType_40_adventurers
	}
	text = {
		trigger = {
			tier = KING
			has_character_flag = adventurers_easter_egg_flag
		}
		localisation_key = GetHighwaymenType_25_adventurers
	}
	text = {
		trigger = {
			tier = DUKE
			has_character_flag = adventurers_easter_egg_flag
		}
		localisation_key = GetHighwaymenType_10_adventurers
	}
	text = {
		trigger = {
			tier = COUNT
			has_character_flag = adventurers_easter_egg_flag
		}
		localisation_key = GetHighwaymenType_5_adventurers
	}
	text = {
		trigger = {
			has_character_flag = adventurers_easter_egg_flag
		}
		localisation_key = GetHighwaymenType_3_adventurers
	}
	text = {
		trigger = {
			is_dragon_race_trigger = yes
		}
		localisation_key = GetHighwaymenType_dragon_hunters
	}
	text = {
		trigger = {
			is_monster_being_trigger = yes
		}
		localisation_key = GetHighwaymenType_monster_hunters
	}
	text = {
		trigger = {
			OR = {
				is_dark_class_trigger = yes
				dark_public_religion_trigger = yes
			}
		}
		localisation_key = GetHighwaymenType_witch_hunters
	}
	fallback_text = {
		localisation_key = GetHighwaymenType_highwaymen
	}
}
# Gets "as you try to raise" if you're incapable, otherwise, says "as you rise to challenge"
defined_text = {
	name = GetAsYouRise
	
	use_first_valid = yes

	text = {
		trigger = {
			is_incapable = yes
		}
		localisation_key = GetAsYouRise_try
	}
	fallback_text = {
		localisation_key = GetAsYouRise_to_challenge
	}
}

# Gets skill(s) of character depending on class: the bow, the sword and magic/magic/the sword
defined_text = {
	name = GetClassSkill
	
	use_first_valid = yes

	text = {
		trigger = {
			is_monk_class_trigger = yes
		}
		localisation_key = GetClassSkill_meditation_and_martial_arts
	}
	text = {
		trigger = {
			is_rogue_class_trigger = yes
		}
		localisation_key = GetClassSkill_the_dagger
	}
	text = {
		trigger = {
			is_hunter_class_trigger = yes
		}
		localisation_key = GetClassSkill_marksmanship
	}
	text = {
		trigger = { is_combined_class_trigger = yes }
		localisation_key = GetClassSkill_the_sword_and_magic
	}
	text = {
		trigger = { is_magic_class_trigger = yes }
		localisation_key = GetClassSkill_magic
	}
	fallback_text = {
		localisation_key = GetClassSkill_the_sword
	}
}

# Gets genocide name depends on you and province you genocide
defined_text = {
	name = GetGenocideName
	
	use_first_valid = yes

	text = {
		trigger = { from_potential_cull_this_province_trigger = yes }
		localisation_key = GetGenocideName_cull
	}
	text = {
		trigger = { from_potential_raise_this_province_trigger = yes }
		localisation_key = GetGenocideName_raise
	}
	fallback_text = {
		localisation_key = GetGenocideName_genocide
	}
}
# Gets genocide description depends on you and province you genocide
defined_text = {
	name = GetGenocideDesc
	
	use_first_valid = yes

	text = {
		trigger = { from_potential_cull_this_province_trigger = yes }
		localisation_key = GetGenocideDesc_cull
	}
	text = {
		trigger = { from_potential_raise_this_province_trigger = yes }
		localisation_key = GetGenocideDesc_raise
	}
	fallback_text = {
		localisation_key = GetGenocideDesc_genocide
	}
}

### Ashbrinfer story custom localization ###
# Gets target_province/a border city
defined_text = {
	name = GetATargetProvince

	text = {
		trigger = { event_target:target_province = { always = yes } }
		localisation_key = Get_target_province
	}
	fallback_text = {
		localisation_key = Get_a_border_city
	}
}
# Gets target_province/the city
defined_text = {
	name = GetTheTargetProvince
	
	use_first_valid = yes

	text = {
		trigger = { event_target:target_province = { always = yes } }
		localisation_key = Get_target_province
	}
	fallback_text = {
		localisation_key = Get_the_city
	}
}
# Gets enemy name of target_province
defined_text = {
	name = GetTargetProvinceEnemies
	
	use_first_valid = yes

	text = {
		trigger = {
			OR = {
				religion = death_god
				culture_group = undead_group
			}
		}
		localisation_key = Get_undead
	}
	text = {
		trigger = {
			OR = {
				religion = burning_legion_religion
				culture_group = demonic_group
			}
		}
		localisation_key = Get_demons
	}
	text = {
		trigger = {
			OR = {
				religion = old_gods_worship
				culture_group = shathyar_group
			}
		}
		localisation_key = Get_void_beings
	}
	fallback_text = {
		localisation_key = Get_enemies
	}
}

### Blood and silver story event
# Mentions previus highlord or not
defined_text = {
	name = GetStartWCLAT9001
	
	use_first_valid = yes

	text = {
		trigger = { event_target:target_former_highlord = { character = yes } }
		localisation_key = GetStartWCLAT9001_highlord
	}
	fallback_text = {
		localisation_key = GetStartWCLAT9001_light
	}
}

### Gets demon type and outcome in WCFEL.9973 depending on flag
defined_text = {
	name = GetDemonTypeOutcome

	use_first_valid = yes

	text = {
		trigger = {
			has_character_flag = summoned_deceitful_nathrezim_flag
		}
		localisation_key = GetDemonTypeOutcome_deceitful_nathrezim
	}
	text = {
		trigger = {
			has_character_flag = summoned_ambitious_annihilan_flag
		}
		localisation_key = GetDemonTypeOutcome_ambitious_annihilan
	}
	text = {
		trigger = {
			has_character_flag = summoned_deceitful_observer_flag
		}
		localisation_key = GetDemonTypeOutcome_deceitful_observer
	}
	text = {
		trigger = {
			OR = {
				has_character_flag = summoned_normal_nathrezim_flag
				has_character_flag = summoned_normal_annihilan_flag
				has_character_flag = summoned_normal_observer_flag
			}
		}
		localisation_key = GetDemonTypeOutcome_normal_case
	}
	fallback_text = {
		localisation_key = GetDemonTypeOutcome_good_case
	}
}

### Gets outcome in WCPRM.600 depending on flag
defined_text = {
	name = GetFateOutcome

	use_first_valid = yes

	text = {
		trigger = {
			has_character_flag = fate_flag_diplomacy
		}
		localisation_key = GetFateOutcome_diplomacy
	}
	text = {
		trigger = {
			has_character_flag = fate_flag_martial
		}
		localisation_key = GetFateOutcome_martial
	}
	text = {
		trigger = {
			has_character_flag = fate_flag_stewardship
		}
		localisation_key = GetFateOutcome_stewardship
	}
	text = {
		trigger = {
			has_character_flag = fate_flag_intrigue
		}
		localisation_key = GetFateOutcome_intrigue
	}
	text = {
		trigger = {
			has_character_flag = fate_flag_learning
		}
		localisation_key = GetFateOutcome_learning
	}
}

### Gets fast regeneration reason
defined_text = {
	name = GetRegenerationReason

	use_first_valid = yes

	text = {
		trigger = {
			trait = creature_troll
		}
		localisation_key = GetRegenerationReason_troll
	}
	fallback_text = {
		localisation_key = GetRegenerationReason_Loa
	}
}

### Gets monk class name
defined_text = {
	name = GetMonkNameCap

	use_first_valid = yes

	text = {
		trigger = {
			always = yes
		}
		localisation_key = GetMonkNameCap_Monk
	}
}
### Gets monk class description
defined_text = {
	name = GetMonkDesc

	use_first_valid = yes

	text = {
		trigger = {
			always = yes
		}
		localisation_key = GetMonkDesc_desc
	}
}
### Gets type of magic
defined_text = {
	name = GetMagicType

	use_first_valid = yes

	text = {
		trigger = {
			OR =  {
				is_paladin_class_trigger = yes
				is_priest_class_trigger = yes
			}
		}
		localisation_key = THE_LIGHT
	}
	text = {
		trigger = {
			is_loa_priest_class_trigger = yes
		}
		localisation_key = GetMagicType_Loa_magic
	}
	text = {
		trigger = {
			is_monk_class_trigger = yes
		}
		localisation_key = GetMagicType_Chi
	}
}

### Gets Old God's lair name
defined_text = {
	name = GetOldGodLairNameOnWonder

	use_first_valid = yes

	text = {
		trigger = { has_cthun_wonder_trigger = yes }
		localisation_key = GetOldGodLairNameOnWonder_AhnQiraj
	}
	text = {
		trigger = { has_nzoth_wonder_trigger = yes }
		localisation_key = GetOldGodLairNameOnWonder_Nyalotha
	}
	text = {
		trigger = { has_yogg_saron_wonder_trigger = yes }
		localisation_key = GetOldGodLairNameOnWonder_Ulduar
	}
}

### Gets Old God's lair name and description
defined_text = {
	name = GetOldGodLairDescOnWonder

	use_first_valid = yes

	text = {
		trigger = { has_cthun_wonder_trigger = yes }
		localisation_key = GetOldGodLairDescOnWonder_AhnQiraj
	}
	text = {
		trigger = { has_nzoth_wonder_trigger = yes }
		localisation_key = GetOldGodLairDescOnWonder_Nyalotha
	}
	text = {
		trigger = { has_yogg_saron_wonder_trigger = yes }
		localisation_key = GetOldGodLairDescOnWonder_Ulduar
	}
}

### Gets your response to body quality, event
defined_text = {
	name = GetBodyQualityResponse

	use_first_valid = yes

	text = {
		trigger = { has_character_flag = spiritbinding_deformed_body_flag }
		localisation_key = GetBodyQualityResponse_deformed
	}
	text = {
		trigger = { has_character_flag = spiritbinding_excellent_body_flag }
		localisation_key = GetBodyQualityResponse_excellent
	}
	fallback_text = {
		localisation_key = GetBodyQualityResponse_normal
	}
}

### Gets your response to body quality, event
defined_text = {
	name = GetSpiritbindingOutcome

	use_first_valid = yes

	text = {
		trigger = { has_character_flag = spiritbinding_soul_trapped_flag }
		localisation_key = GetSpiritbindingOutcome_trapped
	}
	fallback_text = {
		localisation_key = GetSpiritbindingOutcome_transferred
	}
}

### Gets divorce reason of marriage between target_other_spouse and target_spouse
defined_text = {
	name = GetDivorceReason

	use_first_valid = yes

	text = {
		trigger = {
			event_target:target_spouse = { event_target:target_other_spouse = { is_not_isolated_from_prev_trigger = no } }
		}
		localisation_key = GetDivorceReason_mists
	}
	text = {
		trigger = {
			event_target:target_spouse = { can_marry_trigger = no }
		}
		localisation_key = GetDivorceReason_cant_marry
	}
	fallback_text = {
		localisation_key = GetDivorceReason_wrong_race
	}
}

### Get modifier buff based on artifact type
defined_text = {
	name = GetBrewBuff

	use_first_valid = yes

	text = {
		trigger = {
			FROMFROM = { artifact_type = halaani_whiskey_keg }
		}
		localisation_key = GetBrewBuff_diplomacy
	}
	text = {
		trigger = {
			FROMFROM = { artifact_type = sulfuron_slammer_keg }
		}
		localisation_key = GetBrewBuff_martial
	}
	text = {
		trigger = {
			FROMFROM = { artifact_type = metal_brew_keg }
		}
		localisation_key = GetBrewBuff_stewardship
	}
	text = {
		trigger = {
			FROMFROM = { artifact_type = tiger_stout_keg }
		}
		localisation_key = GetBrewBuff_intrigue
	}
	text = {
		trigger = {
			FROMFROM = { artifact_type = serpent_ale_keg }
		}
		localisation_key = GetBrewBuff_learning
	}
}