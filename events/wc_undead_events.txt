namespace=WCUND
# Creates the Scourge
province_event = {
	id = WCUND.99

	is_triggered_only = yes
	hide_window = yes

	immediate = {
		create_character = {
			name = Ner'zhul
			dynasty = 2353
			religion = death_god
			culture = scourge
			female = no
			age = 58
			attributes = {
				martial=5 diplomacy=6 stewardship=5 intrigue=5 learning=7
			}
			trait = mastermind_theologian
			trait = inspiring_leader
			trait = creature_lich
			trait = class_necromancer_9
			trait = being_undead
			trait = lich_king
			trait = in_ice_prison
			trait = shrewd trait = patient trait = ambitious trait = proud trait = deceitful trait = cruel
			flag = is_nerzhul
		}
		new_character = {
			save_event_target_as = target_lich_king
			# Used in scripted effects
			save_event_target_as = target_province_holder
			save_event_target_as = target_settler
			
			set_global_flag = lich_king_happened

			wealth = 1000
			prestige = 1000
			piety = 250
			set_graphical_culture = nerzhul
			
			c_icecrown = {
				location = { convert_to_target_undead_province_effect = yes }
				
				# event_target:target_settler and its people settle here
				settle_as_target_settler_effect = yes
			}
			d_icecrown = {
				any_direct_de_jure_vassal_title = {
					location = { convert_to_target_undead_province_effect = yes }
				
					# event_target:target_settler and its people settle here
					settle_as_target_settler_effect = yes
				}
			}
			d_skalmarnes = {
				any_direct_de_jure_vassal_title = {
					location = { convert_to_target_undead_province_effect = yes }
				
					# event_target:target_settler and its people settle here
					settle_as_target_settler_effect = yes
				}
			}
			d_silentreach = {
				any_direct_de_jure_vassal_title = {
					location = { convert_to_target_undead_province_effect = yes }
				
					# event_target:target_settler and its people settle here
					settle_as_target_settler_effect = yes
				}
			}
			d_dragonwastes = {
				any_direct_de_jure_vassal_title = {
					location = { convert_to_target_undead_province_effect = yes }
				
					# event_target:target_settler and its people settle here
					settle_as_target_settler_effect = yes
				}
			}
			d_snowdrift = {
				any_direct_de_jure_vassal_title = {
					location = { convert_to_target_undead_province_effect = yes }
				
					# event_target:target_settler and its people settle here
					settle_as_target_settler_effect = yes
				}
			}
			
			activate_title = { title = e_scourge status = yes }
			e_scourge = { gain_title = PREV }
			
			set_scourge_government_effect = yes
			
			spawn_scourge_troops_effect = yes
			spawn_scourge_troops_effect = yes
			spawn_scourge_troops_effect = yes
			spawn_scourge_troops_effect = yes

			c_icecrown = {
				# Declares war against player
				target_settler_declare_war_effect = yes
			}
			
			clear_settler_flag_effect = yes

			# Creates the dreadlords
			character_event = { id = WCUND.102 days = 7 }
		}
	}
}

# Creates the dreadlords, notificates the Lich King
character_event = {
	id = WCUND.102

	is_triggered_only = yes
	hide_window = yes

	immediate = {
		# Creates Tichondrius
		create_character = {
			name = Tichondrius
			female = no
			dynasty = none
			culture = nathrezim religion = burning_legion_religion
			age = 500
			attributes = {
				martial=4 diplomacy=6 stewardship=5 intrigue=4 learning=8
			}
			trait = elusive_shadow
			trait = trickster
			trait = creature_nathrezim
			trait = class_warlock_8
			trait = being_demon
			trait = quick trait = patient trait = deceitful trait = gregarious trait = arbitrary trait = cruel trait = cynical
		}
		new_character = {
			e_scourge = {
				holder_scope = {
					PREVPREV = { move_character = PREV }
					opinion = { modifier = opinion_jailer who = PREVPREV }
				}
			}
		}
		# Creates Varimathras
		create_character = {
			name = Varimathras
			female = no
			dynasty = none
			culture = nathrezim religion = burning_legion_religion
			age = 500
			attributes = {
				martial=7 diplomacy=5 stewardship=5 intrigue=8 learning=8
			}
			trait = elusive_shadow
			trait = creature_nathrezim
			trait = class_warlock_6
			trait = being_demon
			trait = content trait = deceitful trait = proud trait = arbitrary trait = cruel trait = cynical trait = gregarious
		}
		new_character = {
			e_scourge = {
				holder_scope = {
					PREVPREV = { move_character = PREV }
					opinion = { modifier = opinion_jailer who = PREVPREV }
				}
			}
		}
		# Creates Mephistroth
		create_character = {
			name = Mephistroth
			female = no
			dynasty = none
			culture = nathrezim religion = burning_legion_religion
			age = 500
			attributes = {
				martial=7 diplomacy=8 stewardship=7 intrigue=5 learning=7
			}
			trait = elusive_shadow
			trait = creature_nathrezim
			trait = class_warlock_7
			trait = being_demon
			trait = wroth trait = deceitful trait = temperate trait = arbitrary trait = cruel trait = cynical trait = greedy
		}
		new_character = {
			e_scourge = {
				holder_scope = {
					PREVPREV = { move_character = PREV }
					opinion = { modifier = opinion_jailer who = PREVPREV }
				}
			}
		}
		# Creates Anetheron
		create_character = {
			name = Anetheron
			female = no
			dynasty = none
			culture = nathrezim religion = burning_legion_religion
			age = 500
			attributes = {
				martial=4 diplomacy=6 stewardship=4 intrigue=6 learning=5
			}
			trait = brilliant_strategist
			trait = creature_nathrezim
			trait = class_warlock_8
			trait = being_demon
			trait = wroth trait = deceitful trait = proud trait = arbitrary trait = cruel trait = cynical trait = diligent
		}
		new_character = {
			e_scourge = {
				holder_scope = {
					PREVPREV = { move_character = PREV }
					opinion = { modifier = opinion_jailer who = PREVPREV }
				}
			}
		}
		# Creates Balnazzar
		create_character = {
			name = Balnazzar
			female = no
			dynasty = none
			culture = nathrezim religion = burning_legion_religion
			age = 500
			attributes = {
				martial=7 diplomacy=4 stewardship=4 intrigue=5 learning=6
			}
			trait = elusive_shadow
			trait = creature_nathrezim
			trait = class_warlock_7
			trait = being_demon
			trait = shrewd trait = deceitful trait = proud trait = arbitrary trait = cruel trait = cynical trait = diligent trait = patient
		}
		new_character = {
			e_scourge = {
				holder_scope = {
					PREVPREV = { move_character = PREV }
					opinion = { modifier = opinion_jailer who = PREVPREV }
				}
			}
		}
		# Creates Detheroc
		create_character = {
			name = Detheroc
			female = no
			dynasty = none
			culture = nathrezim religion = burning_legion_religion
			age = 500
			attributes = {
				martial=6 diplomacy=7 stewardship=5 intrigue=5 learning=7
			}
			trait = fortune_builder
			trait = creature_nathrezim
			trait = class_warlock_5
			trait = being_demon
			trait = temperate trait = deceitful trait = proud trait = arbitrary trait = cruel trait = patient trait = humble
		}
		new_character = {
			e_scourge = {
				holder_scope = {
					PREVPREV = { move_character = PREV }
					opinion = { modifier = opinion_jailer who = PREVPREV }
				}
			}
		}
		
		if = {
			limit = {
				NOT = {
					has_game_rule = {
						name = legion_invasion
						value = off
					}
				}
			}
			set_global_flag = scourge_is_under_legion_control_flag
			character_event = { id = WCUND.109 days = 35 }		# Must be fired for Ner'zhul
		}
	}
}
# Warning about the timing of the Lich King/kills poor Ner'zhul
# Fires for Ner'zhul
character_event = {
	id = WCUND.109

	is_triggered_only = yes
	hide_window = yes
	
	ai = no				# AI has no timing
	only_playable = yes
	only_independent = yes
	has_character_flag = is_nerzhul
	has_global_flag = scourge_is_under_legion_control_flag

	trigger = {
		ai = no
		is_playable = yes
		independent = yes
		has_character_flag = is_nerzhul
		has_global_flag = scourge_is_under_legion_control_flag
		
		is_alive = yes
		is_dying = no

		OR = {
			NOT = { has_character_flag = first_lich_king_warning_flag }
			AND = {
				NOT = { has_character_flag = second_lich_king_warning_flag }
				ruled_years = 12
			}
			AND = {
				NOT = { has_character_flag = third_lich_king_warning_flag }
				ruled_years = 18
			}
			AND = {
				NOT = { has_character_flag = dead_lich_king_flag }
				ruled_years = 20
			}
		}
	}

	immediate = {
		# Finds dreadlord in realm
		if = {
			limit = {
				any_realm_character = {
					reverse_has_opinion_modifier = { who = ROOT modifier = opinion_jailer }
				}
			}
			random_realm_character = {
				limit = { reverse_has_opinion_modifier = { who = ROOT modifier = opinion_jailer } }
				save_event_target_as = target_dreadlord
			}
			if = {
				limit = { NOT = { has_character_flag = first_lich_king_warning_flag } }
				set_character_flag = first_lich_king_warning_flag
			}
			else_if = {
				limit = { NOT = { has_character_flag = second_lich_king_warning_flag } }
				set_character_flag = second_lich_king_warning_flag
			}
			else_if = {
				limit = { NOT = { has_character_flag = third_lich_king_warning_flag } }
				set_character_flag = third_lich_king_warning_flag
			}
			else = {
				set_character_flag = dead_lich_king_flag
			}
			narrative_event = { id = WCUND.110 }
		}
		else = {	# If there's no dreadlord, frees Ner'zhul
			narrative_event = { id = WCUND.115 }
		}
	}
}
narrative_event = {
	id = WCUND.110
	title = EVTTITLE_WCUND_110
	desc = {
		trigger = {
			has_character_flag = second_lich_king_warning_flag
			NOR = {
				has_character_flag = third_lich_king_warning_flag
				has_character_flag = dead_lich_king_flag
			}
		}
		text = EVTDESC_WCUND_110_second_warning
	}
	desc = {
		trigger = {
			has_character_flag = third_lich_king_warning_flag
			NOT = { has_character_flag = dead_lich_king_flag }
		}
		text = EVTDESC_WCUND_110_third_warning
	}
	desc = {
		trigger = {
			has_character_flag = dead_lich_king_flag
		}
		text = EVTDESC_WCUND_110_youre_pizdets
	}
	desc = {
		trigger = {
			has_character_flag = first_lich_king_warning_flag
			NOR = {
				has_character_flag = second_lich_king_warning_flag
				has_character_flag = third_lich_king_warning_flag
				has_character_flag = dead_lich_king_flag
			}
		}
		text = EVTDESC_WCUND_110_first_warning
	}
	picture = GFX_evt_icecrown
	border = GFX_event_narrative_frame_intrigue

	is_triggered_only = yes

	option = {
		name = EVTOPTA_WCUND_110

		if = {
			limit = {
				has_character_flag = dead_lich_king_flag
			}
			hidden_effect = {
				event_target:target_dreadlord = { wealth = ROOT }
				clear_wealth = yes
				any_demesne_title = {
					usurp_title = event_target:target_dreadlord
				}
			}
			death = { death_reason = death_battle killer = event_target:target_dreadlord }
		}
	}
}
# Lich King: All of your jailers are dead, incapable or imprisoned, you're free
narrative_event = {
	id = WCUND.115
	title = EVTTITLE_WCUND_115
	desc = EVTDESC_WCUND_115
	picture = GFX_evt_icecrown
	border = GFX_event_narrative_frame_intrigue

	is_triggered_only = yes

	option = {
		name = EVTOPTA_WCUND_110

		free_scourge_from_legion_effect = yes
	}
}
# on_avoided_imprison_started_war
# on_became_imprisoned
# on_avoided_imprison_fled_country
# If you try to imprison your jailer, the dreadlords kills you
character_event = {
	id = WCUND.120

	is_triggered_only = yes
	hide_window = yes
	
	has_global_flag = scourge_is_under_legion_control_flag

	trigger = {
		FROM = {
			has_landed_title = e_scourge
			has_character_flag = is_nerzhul
			has_opinion_modifier = { who = ROOT modifier = opinion_jailer }
		}
	}

	immediate = {
		save_event_target_as = target_dreadlord
		if = {
			limit = { prisoner = yes }
			imprison = no
		}
		FROM = {
			set_character_flag = dead_lich_king_flag
			narrative_event = { id = WCUND.110 }
		}
	}
}

# The Scourge forms an alliance with the Legion (or not) when it arrived
narrative_event = {
	id = WCUND.130
	title = EVTTITLE_WCUND_130
	desc = EVTDESC_WCUND_130
	picture = GFX_evt_burning_legion
	border = GFX_event_narrative_frame_war

	is_triggered_only = yes

	trigger = {
		e_burning_legion = { has_holder = yes }
		has_global_flag = scourge_is_under_legion_control_flag
	}

	# Form an alliance
	option = {
		name = EVTOPTA_WCUND_130

		e_burning_legion = {
			show_scope_change = no
			holder_scope = {
				show_scope_change = no
				hidden_effect = {
					ROOT = {
						any_vassal = {
							set_defacto_liege = PREVPREV
						}
					}
				}
				e_scourge = {
					show_scope_change = no
					activate_title = { title = e_scourge status = no }
					destroy_landed_title = THIS
				}
				if = {
					limit = { ai = yes }
					ROOT = {
						show_scope_change = no
						set_player_character = PREV
					}
				}
				hidden_effect = {
					ROOT = {
						any_demesne_title = {
							grant_title_no_opinion = PREVPREV
						}
					}
					# CPU HEAVY!
					any_province = {
						limit = { religion = death_god }
						religion = PREV
					}
					any_character = {
						limit = {
							OR = {
								religion = death_god
								secret_religion = death_god
							}
						}
						if = {
							limit = { religion = death_god }
							religion = PREV
						}
						if = {
							limit = { secret_religion = death_god }
							set_secret_religion = { target_type = public target = PREV }
						}
					}
					cult_of_the_damned = {
						any_society_member = {
							leave_society = yes
						}
					}
				}
			}
		}
		death = { death_reason = death_missing }

		ai_chance = {
			factor = 50
			modifier = {
				factor = 0
				NOT = { religion = burning_legion_religion }
			}
		}
	}

	# Break free
	option = {
		trigger = { NOT = { religion = burning_legion_religion } }
		name = EVTOPTA_WCUND_110

		hidden_effect = { e_burning_legion = { holder_scope = { add_rival = ROOT } } }

		ai_chance = {
			factor = 50
			modifier = {
				factor = 0
				religion = burning_legion_religion
			}
		}
		
		free_scourge_from_legion_effect = yes
	}

	after = {
		e_burning_legion = { holder_scope = { narrative_event = { id = WCUND.135 } } }
		
		hidden_effect = {
			free_scourge_from_legion_effect = yes
		}
	}
}
# Notificates the Legion about the decision
narrative_event = {
	id = WCUND.135
	title = EVTTITLE_WCUND_130
	desc = {
		trigger = { has_global_flag = scourge_is_under_legion_control_flag }
		text = EVTDESC_WCUND_135_case_01
	}
	desc = {
		trigger = { NOT = { has_global_flag = scourge_is_under_legion_control_flag } }
		text = EVTDESC_WCUND_135_case_02
	}
	picture = GFX_evt_icecrown
	border = GFX_event_narrative_frame_war

	is_triggered_only = yes

	option = {
		name = {
			trigger = { has_global_flag = scourge_is_under_legion_control_flag }
			text = EXCELLENT
		}
		name = {
			trigger = { NOT = { has_global_flag = scourge_is_under_legion_control_flag } }
			text = ALAS
		}
	}
}

# Undead character rots
character_event = {
	id = WCUND.150
	desc = {
		trigger = {
			NOR = {
				trait = skeleton
				trait = creature_lich
				trait = creature_wickerman
				trait = creature_wicker_behemoth
				trait = creature_wicker_golem
			}
		}
		text = EVTDESC_WCUND_150_flesh
	}
	desc = {
		trigger = {
			OR = {
				trait = skeleton
				trait = creature_lich
				trait = creature_wickerman
				trait = creature_wicker_behemoth
				trait = creature_wicker_golem
			}
		}
		text = EVTDESC_WCUND_150_bones
	}
	picture = GFX_evt_cemetery
	border = GFX_event_normal_frame_intrigue

	is_triggered_only = yes

	ai = no
	min_age = 60
	only_capable = yes
	prisoner = no

	trigger = {
		is_alive = yes
		is_dying = no
		
		is_humanoid_trigger = yes
		trait = being_undead
		NOR = {
			trait = creature_wraith
			trait = creature_banshee
			trait = creature_lich
			trait = vampire				# Have the vampiric hunger for instead
			trait = creature_wickerman
			trait = creature_wicker_behemoth
			trait = creature_wicker_golem
		}
		
		NOT = { trait = lich_king }
	}

	weight_multiplier = {
		days = 1

		modifier = {
			factor = 0.5
			is_maimed_trigger = yes
		}
		modifier = {
			factor = 0.75
			has_injury_trigger = yes
		}
	}

	option = {
		name = CURSES

		add_maimed_trait_effect = yes
	}
}

# Ping doctor
character_event = {
	id = WCUND.179

	is_triggered_only = yes
	hide_window = yes

	immediate = {
		save_event_target_as = target_physician
		FROM  = { long_character_event = { id = WCUND.180 } }
	}
}
# Removes maimed traits for undead
long_character_event = {
	id = WCUND.180
	desc = {
		trigger = { has_character_flag = good_operation_outcome_flag }
		text = EVTDESC_WCUND_180_good
	}
	desc = {
		trigger = { has_character_flag = bad_operation_outcome_flag }
		text = EVTDESC_WCUND_180_bad
	}
	desc = {
		trigger = { has_character_flag = terrible_operation_outcome_flag }
		text = EVTDESC_WCUND_180_terrible
	}
	desc = {
		trigger = {
			trait = skeleton
		}
		text = EVTDESC_WCUND_180_bones
	}
	picture = GFX_evt_apothecary

	is_triggered_only = yes

	immediate = {
		random_list = {
			50 = {
				set_character_flag = good_operation_outcome_flag

				modifier = {
					factor = 1.2
					is_strong_trigger = yes
				}
				modifier = {
					factor = 1.2
					FROM = { trait = physician }
				}
				modifier = {
					factor = 1.2
					FROM = { learning = 25 }
				}
				modifier = {
					factor = 1.2
					FROM = { learning = 20 }
				}
				modifier = {
					factor = 1.2
					FROM = { learning = 15 }
				}
				modifier = {
					factor = 1.2
					FROM = { learning = 10 }
				}
				modifier = {
					factor = 1.2
					FROM = { physician_good_trigger = yes }
				}
			}
			30 = {
				set_character_flag = bad_operation_outcome_flag

				modifier = {
					factor = 1.6
					is_weak_trigger = yes
				}
				modifier = {
					factor = 1.6
					FROM = { NOT = { learning = 10 } }
				}
				modifier = {
					factor = 1.6
					FROM = { NOT = { learning = 5 } }
				}
				modifier = {
					factor = 1.6
					FROM = { physician_bad_trigger = yes }
				}

				modifier = {
					factor = 0
					OR = {
						trait = skeleton
						trait = creature_lich
					}
				}
			}
			20 = {
				set_character_flag = terrible_operation_outcome_flag

				modifier = {
					factor = 3
					trait = lunatic
				}
				modifier = {
					factor = 1.3
					is_weak_trigger = yes
				}
				modifier = {
					factor = 1.3
					FROM = { NOT = { learning = 10 } }
				}
				modifier = {
					factor = 1.3
					FROM = { NOT = { learning = 5 } }
				}
				modifier = {
					factor = 1.3
					FROM = { physician_bad_trigger = yes }
				}

				modifier = {
					factor = 0
					OR = {
						trait = skeleton
						trait = creature_lich
					}
				}
			}
		}
		if = {
			limit = {
				OR = {
					has_character_flag = good_operation_outcome_flag
					has_character_flag = bad_operation_outcome_flag
				}
			}
			remove_random_maimed_effect = yes
		}
	}

	option = {
		name = {
			trigger = { has_character_flag = good_operation_outcome_flag }
			text = EVTOPTA_WCUND_180_good
		}
		name = {
			trigger = { has_character_flag = bad_operation_outcome_flag }
			text = EVTOPTA_WCUND_180_bad
		}
		name = {
			trigger = { has_character_flag = terrible_operation_outcome_flag }
			text = EVTOPTA_WCUND_180_terrible
		}

		if = {
			limit = { has_character_flag = removed_maimed }
			remove_trait = maimed
		}
		if = {
			limit = { has_character_flag = removed_mangled }
			remove_trait = mangled
		}
		if = {
			limit = { has_character_flag = removed_one_eyed }
			remove_trait = one_eyed
		}
		if = {
			limit = { has_character_flag = removed_one_handed }
			remove_trait = one_handed
		}
		if = {
			limit = { has_character_flag = removed_one_legged }
			remove_trait = one_legged
		}
		if = {
			limit = { has_character_flag = removed_disfigured }
			remove_trait = disfigured
		}
		if = {
			limit = {
				trait = severely_injured
				OR = {
					has_character_flag = good_operation_outcome_flag
					has_character_flag = bad_operation_outcome_flag
				}
			}
			remove_trait = severely_injured
			if = {
				limit = { NOT = { trait = scarred } }
				add_trait = scarred
			}
		}
		if = {
			limit = { has_character_flag = bad_operation_outcome_flag }
			add_character_modifier = { name = operation_mistake duration = 730 }
		}
		if = {
			limit = { has_character_flag = terrible_operation_outcome_flag }
			add_character_modifier = { name = terrible_operation_mistake duration = 730 }
		}
	}

	after = {
		clr_character_flag = ongoing_operation_flag

		clr_character_flag = good_operation_outcome_flag
		clr_character_flag = bad_operation_outcome_flag
		clr_character_flag = terrible_operation_outcome_flag
	}
}

# Chooses form of undead
character_event = {
	id = WCUND.300
	desc = {
		trigger = { event_target:target_undead = { NOT = { character = ROOT } } }
		text = EVTDESC_WCUND_300_another
	}
	desc = {
		trigger = { event_target:target_undead = { character = ROOT } }
		text = EVTDESC_WCUND_300_self
	}
	picture = GFX_evt_cemetery
	border = GFX_event_normal_frame_religion
	portrait = event_target:target_necromancer

	is_triggered_only = yes

	# Just an undead
	option = {
		trigger = {
			event_target:target_undead = { NOT = { trait = being_undead } }
			
			event_target:target_necromancer = {
				OR = {
					NOT = {
						event_target:target_undead = {
							has_class_trait_trigger = yes
							is_alternative_class_trigger = no
						}
					}
					NOR = {
						event_target:target_undead = { is_paladin_class_trigger = yes }
						has_7_8_magic_class_or_higher_trigger = yes
						trait = lich_king
						AND = {
							society_member_of = cult_of_the_damned
							is_society_grandmaster = yes
						}
					}
				}
			}
		}
		name = EVTOPTA_WCUND_300
		
		event_target:target_undead = {
			show_scope_change = no
			
			ROOT = {
				show_scope_change = no
				
				complete_quest_turn_into_undead_prev_effect = yes
			}
		}
		tooltip = {
			event_target:target_undead = {
				add_trait_undead_effect = yes
				if = {
					limit = { event_target:target_undead = { NOT = { character = ROOT } } }
					opinion = {
						modifier = opinion_loyal_servant
						who = ROOT
					}
				}
			}
		}
		hidden_effect = { event_target:target_undead = { character_event = { id = WCPOD.5013 } } }

		ai_chance = {
			factor = 15
		}
	}

	# Wickerman
	option = {
		trigger = {
			event_target:target_undead = { NOT = {  trait = creature_wickerman } }
			
			event_target:target_necromancer = {
				true_religion = throsic
				NOT = { event_target:target_undead = { is_paladin_class_trigger = yes } }
			}
		}
		name = EVTOPTG_WCUND_300

		event_target:target_undead = {
			show_scope_change = no
			
			ROOT = {
				show_scope_change = no
				
				complete_quest_turn_into_undead_prev_effect = yes
			}
		}
		event_target:target_undead = {
			set_character_flag = transition_into_wickerman_flag
			tooltip = {
				remove_racial_traits_effect = yes
				add_trait = creature_wickerman
				add_trait_undead_effect = yes
				if = {
					limit = { event_target:target_undead = { NOT = { character = ROOT } } }
					opinion = {
						modifier = opinion_loyal_servant
						who = ROOT
					}
				}
			}
		}
		hidden_effect = { event_target:target_undead = { character_event = { id = WCPOD.5013 } } }

		ai_chance = {
			factor = 15
		}
	}

	# Vampire
	option = {
		trigger = {
			event_target:target_undead = { NOT = { trait = vampire } }
			
			NOT = { event_target:target_undead = { is_paladin_class_trigger = yes } }
			event_target:target_necromancer = {
				NOT = { true_religion = throsic }
				OR = {
					has_7_8_magic_class_or_higher_trigger = yes
					trait = lich_king
					AND = {
						society_member_of = cult_of_the_damned
						is_society_grandmaster = yes
					}
				}
			}
		}
		name = EVTOPTD_WCUND_300

		event_target:target_undead = {
			show_scope_change = no
			
			ROOT = {
				show_scope_change = no
				
				complete_quest_turn_into_undead_prev_effect = yes
			}
		}
		event_target:target_undead = {
			set_character_flag = transition_into_vampire_flag
			tooltip = {
				add_trait_undead_effect = yes
				add_trait = vampire
				if = {
					limit = { event_target:target_undead = { NOT = { character = ROOT } } }
					opinion = {
						modifier = opinion_loyal_servant
						who = ROOT
					}
				}
			}
		}
		hidden_effect = { event_target:target_undead = { character_event = { id = WCPOD.5013 } } }

		ai_chance = {
			factor = 5
		}
	}

	# Wicker behemoth
	option = {
		trigger = {
			event_target:target_undead = { NOT = {  trait = creature_wicker_behemoth } }
			
			NOT = { event_target:target_undead = { is_paladin_class_trigger = yes } }
			event_target:target_necromancer = {
				true_religion = throsic
				has_7_8_magic_class_or_higher_trigger = yes
			}
		}
		name = EVTOPTH_WCUND_300

		event_target:target_undead = {
			show_scope_change = no
			
			ROOT = {
				show_scope_change = no
				
				complete_quest_turn_into_undead_prev_effect = yes
			}
		}
		event_target:target_undead = {
			set_character_flag = transition_into_wicker_behemoth_flag
			tooltip = {
				remove_racial_traits_effect = yes
				add_trait = creature_wicker_behemoth
				add_trait_undead_effect = yes
				if = {
					limit = { event_target:target_undead = { NOT = { character = ROOT } } }
					opinion = {
						modifier = opinion_loyal_servant
						who = ROOT
					}
				}
			}
		}
		hidden_effect = { event_target:target_undead = { character_event = { id = WCPOD.5013 } } }

		ai_chance = {
			factor = 25
		}
	}

	# Death Knight
	option = {
		trigger = {
			event_target:target_undead = { NOT = { is_death_knight_class_trigger = yes } }
			
			event_target:target_undead = {
				has_class_trait_trigger = yes
				is_alternative_class_trigger = no
			}
			event_target:target_necromancer = {
				OR = {
					event_target:target_undead = { is_paladin_class_trigger = yes }
					has_7_8_magic_class_or_higher_trigger = yes
					trait = lich_king
					AND = {
						society_member_of = cult_of_the_damned
						is_society_grandmaster = yes
					}
				}
			}
		}
		name = EVTOPTC_WCUND_300

		event_target:target_undead = {
			show_scope_change = no
			
			ROOT = {
				show_scope_change = no
				
				complete_quest_turn_into_undead_prev_effect = yes
			}
		}
		event_target:target_undead = {
			set_character_flag = transition_into_death_knight_flag
			tooltip = {
				add_trait_undead_effect = yes
				custom_tooltip = { text = becomes_death_knight }
				if = {
					limit = { event_target:target_undead = { NOT = { character = ROOT } } }
					opinion = {
						modifier = opinion_loyal_servant
						who = ROOT
					}
				}
			}
		}
		hidden_effect = { event_target:target_undead = { character_event = { id = WCPOD.5013 } } }

		ai_chance = {
			factor = 50
		}
	}

	# Lich
	option = {
		trigger = {
			event_target:target_undead = { NOT = {  trait = creature_lich } }
			
			NOT = { event_target:target_undead = { is_paladin_class_trigger = yes } }
			event_target:target_necromancer = {
				NOT = { true_religion = throsic }
				OR = {
					has_7_8_magic_class_or_higher_trigger = yes
					trait = lich_king
					AND = {
						society_member_of = cult_of_the_damned
						is_society_grandmaster = yes
					}
				}
			}
		}
		name = EVTOPTF_WCUND_300

		event_target:target_undead = {
			show_scope_change = no
			
			ROOT = {
				show_scope_change = no
				
				complete_quest_turn_into_undead_prev_effect = yes
			}
		}
		event_target:target_undead = {
			set_character_flag = transition_into_lich_flag
			tooltip = {
				remove_racial_traits_effect = yes
				add_trait = creature_lich
				add_trait_undead_effect = yes
				if = {
					limit = { event_target:target_undead = { NOT = { character = ROOT } } }
					opinion = {
						modifier = opinion_loyal_servant
						who = ROOT
					}
				}
			}
		}
		hidden_effect = { event_target:target_undead = { character_event = { id = WCPOD.5013 } } }

		ai_chance = {
			factor = 25
		}
	}

	# No, I changed my mind
	option = {
		name = CHANGED_MY_MIND

		event_target:target_undead = {
			# Clears flags that undead gets during rising
			clr_undead_raising_flags = yes
		}

		ai_chance = {
			factor = 0
		}
	}
	
	after = {
		if = {	# Lich King or member of the Cult of the Damned is target_necromancer in ask_for_dark_gift decision, but target_necromancer doesn't get any flags that should be cleared
			limit = {
				event_target:target_undead = { NOT = { has_character_flag = ask_for_dark_gift_used_flag } }
			}
			event_target:target_necromancer = {
				# Clears flags that necromancer gets during rising
				clr_necromancer_raising_flags = yes
			}
		}
	}
}

#######################################
# The Creation of a monstrous undead / wicker golem
#######################################
character_event = {
	id = WCUND.350
	
	desc = {
		trigger = {
			NOT = {
				true_religion = throsic
			}
		}
		text = EVTDESC_WCUND_350_abomination
		picture = GFX_evt_apothecary
	}
	
	desc = {
		trigger = {
			true_religion = throsic
		}
		text = EVTDESC_WCUND_350_wickergolem
		picture = GFX_evt_drustvar
	}
	
	picture = GFX_evt_apothecary
	border = GFX_event_normal_frame_religion

	is_triggered_only = yes
	
	option = {
		trigger = {
			NOT = {
				true_religion = throsic
			}
		}
		name = EVTOPTA_WCUND_350_abomination
	}
	
	option = {
		trigger = {
			true_religion = throsic
		}
		name = EVTOPTA_WCUND_350_wickergolem
	}	

	after = {
		character_event = { id = WCUND.355 }
	}
}

# Remove the higher cognitive functions?
character_event = {
	id = WCUND.355
	
	desc = {
		trigger = {
			NOT = {
				true_religion = throsic
			}
		}
		text = EVTDESC_WCUND_355_abomination
		picture = GFX_evt_apothecary
	}
	
	desc = {
		trigger = {
			true_religion = throsic
		}
		text = EVTDESC_WCUND_355_wickergolem
		picture = GFX_evt_drustvar
	}
	
	picture = GFX_evt_apothecary
	border = GFX_event_normal_frame_religion

	is_triggered_only = yes

	show_from_from = yes

	option = {
		name = {
			text = EVTOPTA_WCUND_355_abomination
			trigger = {
				NOT = {
					true_religion = throsic
				}
			}
		}
		
		name = {
			text = EVTOPTA_WCUND_355_wickergolem
			trigger = {
				true_religion = throsic
			}
		}

		custom_tooltip = { text = EVTOPTA_WCUND_355_tooltip }
		event_target:target_prisoner = {
			random_list = {
				10 = {
					modifier = {
						factor = 1.5
						trait = genius
					}
					modifier = {
						factor = 1.3
						trait = quick
					}
					modifier = {
						factor = 1.3
						trait = shrewd
					}
				}
				40 = {
					tooltip = { add_trait = slow }
					hidden_effect = { ROOT = { set_character_flag = slow_mn_flag } }

					modifier = {
						factor = 1.5
						trait = imbecile
					}
					modifier = {
						factor = 1.3
						trait = slow
					}
					modifier = {
						factor = 1.3
						trait = dull
					}
				}
				50 = {
					tooltip = { add_trait = imbecile }
					hidden_effect = { ROOT = { set_character_flag = imbecile_mn_flag } }

					modifier = {
						factor = 1.5
						trait = imbecile
					}
					modifier = {
						factor = 1.3
						trait = slow
					}
					modifier = {
						factor = 1.3
						trait = dull
					}
				}
			}
		}
	}
	
	option = {
		name = {
			text = EVTOPTB_WCUND_355_abomination
			trigger = {
				NOT = {
					true_religion = throsic
				}
			}
		}
		
		name = {
			text = EVTOPTB_WCUND_355_wickergolem
			trigger = {
				true_religion = throsic
			}
		}

		event_target:target_prisoner = {
			random_list = {
				65 = {
					modifier = {
						factor = 1.5
						trait = genius
					}
					modifier = {
						factor = 1.3
						trait = quick
					}
					modifier = {
						factor = 1.3
						trait = shrewd
					}
				}
				20 = {
					tooltip = { add_trait = slow }
					hidden_effect = { ROOT = { set_character_flag = slow_mn_flag } }

					modifier = {
						factor = 1.5
						trait = imbecile
					}
					modifier = {
						factor = 1.3
						trait = slow
					}
					modifier = {
						factor = 1.3
						trait = dull
					}
				}
				15 = {
					tooltip = { add_trait = imbecile }
					hidden_effect = { ROOT = { set_character_flag = imbecile_mn_flag } }

					modifier = {
						factor = 1.5
						trait = imbecile
					}
					modifier = {
						factor = 1.3
						trait = slow
					}
					modifier = {
						factor = 1.3
						trait = dull
					}
				}
			}
		}
	}

	after = {
		# Monstrous undead
		create_character = {
			dynasty = none
			religion = ROOT
			culture = ROOT
			female = no
			age = 20
		}
		hidden_effect = {
			new_character = {
				# Add race trait depending on religion
				if = {
					limit = { ROOT = {  true_religion = throsic } }
					set_character_flag = transition_into_wicker_golem_flag
				}				
				else = {
					set_character_flag = transition_into_abomination_flag
				}
				
				# Fire the event
				character_event = { id = WCPOD.5013 }
				
				# Set traits
				if = {
					limit = {
						NOT = { trait = slow }
						ROOT = { has_character_flag = slow_mn_flag }
					}
					add_trait = slow
				}
				if = {
					limit = {
						NOT = { trait = imbecile }
						ROOT = { has_character_flag = imbecile_mn_flag }
					}
					add_trait = imbecile
				}
				remove_education_effect = yes
				random_list = {
					10 = {
						add_trait = misguided_warrior
						add_trait = class_warrior_2
					}
					45 = {
						add_trait = tough_soldier
						add_trait = class_warrior_3

						modifier = {
							factor = 0.5
							trait = slow
						}
						modifier = {
							factor = 0.5
							trait = imbecile
						}
					}
					30 = {
						add_trait = skilled_tactician
						add_trait = class_warrior_4

						modifier = {
							factor = 0.1
							trait = slow
						}
						modifier = {
							factor = 0.1
							trait = imbecile
						}
					}
					15 = {
						add_trait = brilliant_strategist
						add_trait = class_warrior_5

						modifier = {
							factor = 0.1
							trait = slow
						}
						modifier = {
							factor = 0.1
							trait = imbecile
						}
					}
				}
				event_target:target_prisoner = { death = { death_reason = death_missing } }
				character_event = { id = WCUND.359 }
			}
		}
	}
}
# Ping event
character_event = {
	id = WCUND.359

	is_triggered_only = yes
	hide_window = yes

	immediate = {
		event_target:target_necromancer = { character_event = { id = WCUND.360 } }
	}
}
# Notification about the end
character_event = {
	id = WCUND.360
	
	desc = {
		trigger = {
			NOT = {
				true_religion = throsic
			}
		}
		text = EVTDESC_WCUND_360_abomination
		picture = GFX_evt_apothecary
	}
	
	desc = {
		trigger = {
			true_religion = throsic
		}
		text = EVTDESC_WCUND_360_wickergolem
		picture = GFX_evt_drustvar
	}
	
	picture = GFX_evt_apothecary
	border = GFX_event_normal_frame_religion

	is_triggered_only = yes

	option = {
		name = EXCELLENT
	}
	after = {
		# Clears flags that necromancer gets during rising
		clr_necromancer_raising_flags = yes
	}
}

#########################################
# The Transformation into an Abomination / Wicker Golem
#########################################
# The first phase of the operation
character_event = {
	id = WCUND.370	
	desc = {
		trigger = {
			NOT = {
				true_religion = throsic
			}
		}
		text = EVTDESC_WCUND_370_abomination
		picture = GFX_evt_apothecary
	}
	
	desc = {
		trigger = {
			true_religion = throsic
		}
		text = EVTDESC_WCUND_370_wickergolem
		picture = GFX_evt_drustvar
	}
	
	picture = GFX_evt_apothecary
	border = GFX_event_normal_frame_religion

	is_triggered_only = yes

	option = {
		trigger = {
			NOT = {
				true_religion = throsic
			}
		}
		name = EVTOPTA_WCUND_370_abomination
	}
	
	option = {
		trigger = {
			true_religion = throsic
		}
		name = EVTOPTA_WCUND_370_wickergolem
	}

	after = {
		character_event = { id = WCUND.375 }
	}
}
# The end
character_event = {
	id = WCUND.375
	desc = {
		trigger = {
			NOT = {
				true_religion = throsic
			}
		}
		text = EVTDESC_WCUND_375_abomination
		picture = GFX_evt_apothecary
	}
	
	desc = {
		trigger = {
			true_religion = throsic
		}
		text = EVTDESC_WCUND_375_wickergolem
		picture = GFX_evt_drustvar
	}
	
	picture = GFX_evt_apothecary
	border = GFX_event_normal_frame_religion

	is_triggered_only = yes

	option = {
		name = EVTOPTA_WCUND_375

		remove_racial_traits_effect = yes
		
		# Assign creature trait depending on religion		
		if = {
			limit = { true_religion = throsic } 
			add_trait = creature_wicker_golem
		}
		else = {
			add_trait = creature_abomination
		}

		# Fixes immortal age
		add_age_back_effect = yes

		# Set graphical culture depending on creature type
		if = {
			limit = { trait = creature_abomination }
			hidden_effect = { set_graphical_culture = abomination }
		}
		else_if = {
			limit = { trait = creature_wicker_golem }
			hidden_effect = { set_graphical_culture = wicker_golem }
		}
	}

	after = {
		# Clears flags that necromancer gets during rising
		clr_necromancer_raising_flags = yes
		# Clears flags that undead gets during rising
		clr_undead_raising_flags = yes
	}
}

###############################
# Merging with Lich King
###############################
### Saves owner of Frostmourne as global event target
character_event = {
	id = WCUND.395
	
	is_triggered_only = yes
	hide_window = yes
	
	trigger = {
		FROM = { artifact_type = frostmourne }
	}
	
	immediate = {
		save_global_event_target_as = target_frostmourne_holder
	}
}
### Merge intro
narrative_event = {
	id = WCUND.400
	title = EVTTITLE_WCUND_400
	desc = EVTDESC_WCUND_400
	picture = GFX_evt_icecrown
	border = GFX_event_narrative_frame_intrigue

	is_triggered_only = yes
	
	immediate = {
		hidden_effect = {
			e_scourge = {
				holder_scope = {
					save_event_target_as = target_lich_king
					
					set_character_flag = merge_with_champion_ongoing_flag
				}
			}
			save_event_target_as = target_champion
			# You feel guilt of killing that character
			if = {
				limit = { any_kill_list_character = { is_close_relative = ROOT } }
				random_kill_list_character = {
					limit = { is_close_relative = ROOT }
					save_event_target_as = target_killed_character
				}
			}
		}
		
		add_trait = travelling
	}

	option = { #For the champion
		name = EVTOPTA_WCUND_400
		
		# If you finished the Champion event chain, you get +1 event
		if = {
			limit = { has_character_flag = finished_champion_event_chain_flag }
			73 = { province_event = { id = WCUND.410 days = 30 } }
		}
		else = {
			73 = { province_event = { id = WCUND.524 days = 60 } }
		}
	}
}
### Return to Northrend
# Delayed event
province_event = {
	id = WCUND.410
	
	is_triggered_only = yes
	hide_window = yes
	
	immediate = {
		# If... these conditions are met, event chain can go on
		if = {
			limit = {
				event_target:target_lich_king = { merging_lich_king_trigger = yes }
				event_target:target_champion = { merging_champion_trigger = yes }
			}
			event_target:target_champion = { narrative_event = { id = WCUND.411 } }
		}
		# Else... notify that event chain failed
		else = {
			event_target:target_lich_king = { character_event = { id = WCUND.540 } }
			event_target:target_champion = { character_event = { id = WCUND.540 } }
		}
	}
}
# Delayer event
narrative_event = {
	id = WCUND.411
	title = EVTTITLE_WCUND_400
	desc = EVTDESC_WCUND_411
	picture = GFX_evt_icecrown
	border = GFX_event_narrative_frame_intrigue

	is_triggered_only = yes
	
	option = {
		name = EVTOPTA_WCUND_411
		
		remove_slothful_or_add_diligent_silently_effect = yes
		
		73 = { province_event = { id = WCUND.524 days = 30 } }
	}
}
### Merges with Lich King
# Delayer event
province_event = {
	id = WCUND.524
	
	is_triggered_only = yes
	hide_window = yes
	
	immediate = {
		# If... these conditions are met, event chain can go on
		if = {
			limit = {
				event_target:target_lich_king = { merging_lich_king_trigger = yes }
				event_target:target_champion = { merging_champion_trigger = yes }
			}
			event_target:target_champion = { narrative_event = { id = WCUND.525 } }
		}
		# Else... notify that event chain failed
		else = {
			event_target:target_lich_king = { character_event = { id = WCUND.540 } }
			event_target:target_champion = { character_event = { id = WCUND.540 } }
		}
	}
}
# Delayed event
narrative_event = {
	id = WCUND.525
	title = EVTTITLE_WCUND_400
	desc = EVTDESC_WCUND_525
	picture = GFX_evt_icecrown
	border = GFX_event_narrative_frame_intrigue

	is_triggered_only = yes

	# Consume Lich King's soul - if Lich King is player, Lich King gets game over :3
	option = {
		trigger = {
			event_target:target_lich_king = { ai = no }
		}
		name = EVTOPTA_WCUND_525
		
		hidden_effect = {
			if = {
				limit = { OR = { is_republic = yes is_theocracy = yes is_nomadic = yes } }
				abdicate = yes
			}
		}
		event_target:target_lich_king = {
			show_scope_change = no
			
			this_abdicate_transfer_wealth_to_prev_effect = yes
			hidden_effect = { death = { death_reason = death_merged killer = ROOT } }
		}
		
		ai_chance = {
			factor = 0
		}
	}
	
	# Merge with Lich King's soul
	option = {
		name = EVTOPTB_WCUND_525
		
		hidden_effect = {
			if = {
				limit = { OR = { is_republic = yes is_theocracy = yes is_nomadic = yes } }
				abdicate = yes
			}
		}
		event_target:target_lich_king = {
			show_scope_change = no
			
			this_abdicate_transfer_wealth_to_play_prev_effect = yes
			hidden_effect = { death = { death_reason = death_merged killer = ROOT } }
		}
	}
	
	after = {
		remove_trait = travelling
		add_trait = sleeping_trait
		
		clear_delayed_event = { id = WCUND.530 }			# Must be here because 2 characters can fire this event due to set_player_character inside of this_abdicate_transfer_wealth_to_play_prev_effect
		narrative_event = { id = WCUND.530 years = 2 }
	}
}
### Visions
narrative_event = {
	id = WCUND.530
	title = EVTTITLE_WCUND_400
	desc = EVTDESC_WCUND_530
	picture = GFX_evt_icecrown
	border = GFX_event_narrative_frame_intrigue

	is_triggered_only = yes
	
	trigger = {
		trait = sleeping_trait
		
		has_landed_title = e_scourge
	}

	# Kill both visions
	option = {
		name = EVTOPTA_WCUND_530
		
		remove_content_or_add_ambitious_silently_effect = yes	# You're the only king!
		remove_trusting_or_add_paranoid_silently_effect = yes 	# Traitors! They all are traitors!
		
		# Effects of both options
		# Kill humanity
		remove_patient_or_add_wroth_silently_effect = yes		# Humanity is patient, you killed it
		remove_humble_or_add_proud_silently_effect = yes		# Humanity is humble, you killed it
		remove_just_or_add_arbitrary_silently_effect = yes		# Humanity is just, you killed it
		# Kill Ner'zhul
		remove_honest_or_add_deceitful_silently_effect = yes	# Ner'zhul trusted you!
	}
	# Kill your humanity
	option = {
		name = EVTOPTB_WCUND_530
		
		add_trait_silently_erudite_effect = yes					# Ner'zhul knows many things
		remove_patient_or_add_wroth_silently_effect = yes		# Humanity is patient, you killed it
		remove_humble_or_add_proud_silently_effect = yes		# Humanity is humble, you killed it
		remove_just_or_add_arbitrary_silently_effect = yes		# Humanity is just, you killed it
		
		ai_chance = {
			factor = 0
		}
	}
	# Kill Ner'zhul
	option = {
		name = EVTOPTC_WCUND_530
		
		remove_honest_or_add_deceitful_silently_effect = yes	# Ner'zhul trusted you!
		remove_wroth_or_add_patient_silently_effect = yes		# Humanity is patient, you saved it
		remove_proud_or_add_humble_silently_effect = yes		# Humanity is humble, you saved it
		remove_arbitrary_or_add_just_silently_effect = yes		# Humanity is just, you saved it
		
		set_character_flag = killed_nerzhul_soul_flag
		
		ai_chance = {
			factor = 0
		}
	}
	
	after = {
		narrative_event = { id = WCUND.535 years = 2 }
	}
}
### Dream Over
narrative_event = {
	id = WCUND.535
	title = EVTTITLE_WCUND_400
	desc = EVTDESC_WCUND_535
	picture = GFX_evt_icecrown
	border = GFX_event_narrative_frame_intrigue

	is_triggered_only = yes
	
	trigger = {
		trait = sleeping_trait
		
		has_landed_title = e_scourge
	}

	# Remove heart
	option = {
		trigger = { NOT = { has_character_flag = killed_nerzhul_soul_flag } }
		name = EVTOPTA_WCUND_535
		
		remove_kind_or_add_envious_and_cruel_silently_effect = yes	# No mercy!
	}
	# Keep heart
	option = {
		name = EVTOPTB_WCUND_535
		
		remove_envious_and_cruel_or_add_kind_silently_effect = yes	# My undead servans deserve love!
		
		ai_chance = {
			factor = 0
		}
	}
	
	after = {
		remove_trait = sleeping_trait
	}
}
### Merging failed
character_event = {
	id = WCUND.540
	desc = {
		trigger = { character = event_target:target_lich_king }
		text = EVTDESC_WCUND_540_lich_king
	}
	desc = {
		trigger = { character = event_target:target_champion }
		text = EVTDESC_WCUND_540_champion
	}
	picture = GFX_evt_icecrown
	border = GFX_event_normal_frame_intrigue
	
	is_triggered_only = yes
	
	option = {
		name = ALAS
	}

	after = {
		clr_character_flag = merge_with_champion_ongoing_flag
		if = {
			limit = {
				trait = travelling
				
				character = event_target:target_champion
			}
			remove_trait = travelling
		}
	}
}

# The New Lich King
narrative_event = {
	id = WCUND.551
	title = {
		trigger = { ROOT = { has_character_flag = is_nerzhul } }
		text = EVTTITLE_WCUND_100
	}
	desc = {
		trigger = { ROOT = { has_character_flag = is_nerzhul } }
		text = EVTDESC_WCUND_100
	}
	title = {
		trigger = { ROOT = { NOT = { has_character_flag = is_nerzhul } } }
		text = EVTTITLE_WCUND_551
	}
	desc = {
		trigger = { ROOT = { NOT = { has_character_flag = is_nerzhul } } }
		text = EVTDESC_WCUND_551
	}
	picture = GFX_evt_icecrown
	border = GFX_event_narrative_frame_diplomacy

	is_triggered_only = yes

	major = yes
	major_trigger = {
		ai = no
	}
	show_root = yes

	option = {
		name = {
			trigger = {
				NOT = { character = ROOT }
				opinion = { who = ROOT value = 10 }
			}
			text = EVTOPTA_WCUND_551_case_1
		}
		name = {
			trigger = {
				NOT = { character = ROOT }
				NOT = { opinion = { who = ROOT value = 10 } }
			}
			text = EVTOPTA_WCUND_551_case_2
		}
		name = {
			trigger = { character = ROOT }
			text = EVTOPTA_WCUND_551_case_3
		}
	}
}

# Vampiric Hunger
character_event = {
	id = WCUND.605
	desc = EVTDESC_WCUND_605
	picture = GFX_evt_cemetery
	border = GFX_event_normal_frame_intrigue

	is_triggered_only = yes

	ai = no
	only_playable = yes
	min_age = 16
	prisoner = no
	only_capable = yes

	trigger = {
		is_alive = yes
		is_dying = no
		
		trait = vampire
		
		NOT = { has_character_modifier = moderate_blood_thirst }
	}

	option = {
		name = EVTOPTA_WCUND_605

		increase_vampiric_hunger_effect = yes
	}
}

# Lich returns its corporeal body
character_event = {
	id = WCUND.900
	desc = EVTDESC_WCUND_900
	picture = GFX_evt_lich
	border = GFX_event_normal_frame_intrigue

	is_triggered_only = yes

	option = {
		name = EXCELLENT

		remove_trait = lost_corporeal_body
	}
}

# Troops finds lich's phylactery
character_event = {
	id = WCUND.920
	desc = EVTDESC_WCUND_920
	picture = GFX_evt_lich
	border = GFX_event_normal_frame_war

	is_triggered_only = yes
	
	only_playable = yes

	trigger = {
		FROM = {
			holder_scope = {
				NOT = { same_realm = ROOT }
				
				trait = creature_lich
				NOT = { has_landed_title = e_scourge }
				capital_holding = { title = FROM }
			}
		}
	}

	immediate = {
		FROM = { holder_scope = { save_event_target_as = target_lich } }
	}

	# Kill it!
	option = {
		name = EVTOPTA_WCUND_920

		event_target:target_lich = {
			character_event = { id = WCUND.925 }
			death = { death_reason = death_battle killer = ROOT }
		}
	}
	# No
	option = {
		name = EVTOPTB_WCUND_920
	}
}
character_event = {
	id = WCUND.925
	desc = EVTDESC_WCUND_925
	picture = GFX_evt_lich
	border = GFX_event_normal_frame_war

	is_triggered_only = yes

	option = {
		name = ALAS
	}
}

#####################
# End of the Scourge
#####################
# Delayer event
character_event = {
	id = WCUND.1009
	
	is_triggered_only = yes
	hide_window = yes
	
	trigger = {
		has_landed_title = e_scourge
	}
	
	immediate = {
		save_event_target_as = target_lich_king
		
		activate_title = { title = e_scourge status = no }
		e_scourge = { destroy_landed_title = THIS }
		
		any_playable_ruler = {
			limit = {
				OR = {
					ai = no
					has_character_flag = is_kaelthas_flag
				}
			}
			if = {
				limit = {
					OR = {
						reverse_has_opinion_modifier = { who = event_target:target_lich_king modifier = declared_war }
						reverse_has_opinion_modifier = { who = event_target:target_lich_king modifier = opinion_tyrant }
						reverse_has_opinion_modifier = { who = event_target:target_lich_king modifier = lost_war }
					}
				}
				set_character_flag = interested_in_scourge_defeat_flag
			}
			narrative_event = { id = WCUND.1010 }
		}
		
		event_target:target_lich_king = { death = { death_reason = death_missing } } # The Lich King goes down with the Scourge
	}
}
# Delayed event
narrative_event = {
	id = WCUND.1010
	title = EVTTITLE_WCUND_1010
	desc = EVTDESC_WCUND_1010
	picture = GFX_evt_scourge_army
	border = GFX_event_narrative_frame_war

	is_triggered_only = yes

	hide_new = yes

	# Kael'thas: It's time to get home
	option = {
		trigger = {
			kaelthas_can_return_to_quelthalas_trigger = yes
		}
		name = ITS_TIME_TO_GET_HOME
		
		save_event_target_as = target_kaelthas
		
		# End of Thalassian Regency
		73 = { province_event = { id = WCTFT.495 days = 30 random = 30 } }
	}
	# It's not over yet!
	option = {
		trigger = {
			NOT = {
				kaelthas_can_return_to_quelthalas_trigger = yes
			}
			OR = {
				true_religion = death_god
				true_religion = burning_legion_religion
			}
		}
		name = ITS_NOT_OVER_YET
	}
	# We can sleep peacefully now
	option = {
		trigger = {
			NOT = {
				kaelthas_can_return_to_quelthalas_trigger = yes
				true_religion = death_god
				true_religion = burning_legion_religion
			}
			OR = {
				is_aggressive_trigger = no
				religion = scarlet_light	#Hates the undead
				has_character_flag = interested_in_scourge_defeat_flag
			}
		}
		name = WE_CAN_SLEEP_PEACEFULLY_NOW
	}
	# Who cares?
	option = {
		trigger = {
			NOT = {
				kaelthas_can_return_to_quelthalas_trigger = yes
				true_religion = death_god
				true_religion = burning_legion_religion
				is_aggressive_trigger = no
				religion = scarlet_light	#Hates the undead
				has_character_flag = interested_in_scourge_defeat_flag
			}
		}
		name = WHO_CARES
	}
	
	after = {
		clr_character_flag = interested_in_scourge_defeat_flag
	}
}

#############################################
#				Lich King Mind Control Mechanics
#############################################
# Increases power of mind control.
# This stages important only for Lich King
# Stages:
# 1) mind_control_1 - 100-75	- If the LK reach this stage, he has a 100% chance to make any undead in the realm his servant.
# 2) mind_control_2 - 74-50 	- If the LK reach this stage, he has a 66% chance to make any undead in the realm his servant.
# 3) mind_control_3 - 49-25 	- If the LK reach this stage, he has a 33% chance to make any undead in the realm his servant.
# 4) mind_control_4 - 24-0
character_event = {
	id = WCUND.1106
	desc = EVTDESC_WCCLS_1106
	picture = GFX_evt_scourge_army
	border = GFX_event_normal_frame_war

	is_triggered_only = yes

	only_playable = yes

	trigger = {
		NOT = { has_character_flag = mind_control_stage_add_flag }
		
		# You're a Lich King, but don't have modifier
		trigger_if = {
			limit = {
				NOR = {
					has_character_modifier = mind_control_1
					has_character_modifier = mind_control_2
					has_character_modifier = mind_control_3
					has_character_modifier = mind_control_4
				}
			}
			has_landed_title = e_scourge
		}
		# Normal ways
		trigger_else_if = {
			limit = { check_variable = { which = mind_control_power value = 75 } }
			NOT = { has_character_modifier = mind_control_1 }
		}
		trigger_else_if = {
			limit = { check_variable = { which = mind_control_power value = 50 } }
			NOT = { has_character_modifier = mind_control_2 }
		}
		trigger_else = {
			check_variable = { which = mind_control_power value = 25 }
			NOT = { has_character_modifier = mind_control_3 }
		}
	}
	
	immediate = {
		log = "WCUND.1106 fired for [Root.GetBestName]"
		
		set_character_flag = mind_control_stage_add_flag
	}

	option = {
		name = EXCELLENT

		# Increases stage of Mind Control and makes undead loyal
		increase_mind_control_stage_effect = yes
	}
	
	after = {
		clr_character_flag = mind_control_stage_add_flag
	}
}
# Decreases power of mind control
# Stages:
# 1) mind_control_1 - 100-75
# 2) mind_control_2 - 74-50 	- If you descend to this stage, you lose 33% of your servants.
# 3) mind_control_3 - 49-25 	- If you descend to this stage, you lose 66% of your servants.
# 4) mind_control_4 - 24-0 		- If you descend to this stage, you lose 100% of your servants.
character_event = {
	id = WCUND.1107
	desc = EVTDESC_WCCLS_1107
	picture = GFX_evt_scourge_army
	border = GFX_event_normal_frame_war

	is_triggered_only = yes

	only_playable = yes

	trigger = {
		NOT = { has_character_flag = mind_control_stage_remove_flag }
		
		trigger_if = {
			limit = { NOT = { check_variable = { which = mind_control_power value = 25 } } }
			NOT = { has_character_modifier = mind_control_4 }
		}
		trigger_else_if = {
			limit = { NOT = { check_variable = { which = mind_control_power value = 50 } } }
			NOT = { has_character_modifier = mind_control_3 }
		}
		trigger_else = {
			NOT = { check_variable = { which = mind_control_power value = 75 } }
			NOT = { has_character_modifier = mind_control_2 }
		}
	}
	
	immediate = {
		log = "WCUND.1107 fired for [Root.GetBestName]"
		# Used to prevent twice firing of event
		set_character_flag = mind_control_stage_remove_flag
	}

	option = {
		name = ALAS
		
		# Decreases stage of Mind Control and makes undead disloyal
		decrease_mind_control_stage_effect = yes
	}
	
	after = {
		clr_character_flag = mind_control_stage_remove_flag
	}
}

# Undead becomes a servant of the LK - event is problematic
character_event = {
	id = WCUND.1108
	desc = EVTDESC_WCCLS_1108
	picture = GFX_evt_scourge_army

	is_triggered_only = yes
	
	trigger = {
		can_be_mind_controlled_by_scourge_trigger = yes
	}

	immediate = {
		log = "WCUND.1108 fired for [Root.GetBestName]"
	}

	option = {
		name = ALAS

		e_scourge = {
			show_scope_change = no
			holder_scope = {
				show_scope_change = no
				ROOT = {
					show_scope_change = no
					
					# Changes religion
					if = {
						limit = { NOT = { religion = PREV } }
						religion = PREV
					}
					if = {
						limit = { has_secret_religion = yes }
						clear_secret_religion = yes
					}
					hidden_effect = {
						if = {
							limit = {
								is_landed = yes
								higher_tier_than = BARON
							}
							# Changes religion of your provinces
							change_undead_demesne_provinces_religion_to_root_effect = yes
						}
					}
					remove_opinion = { modifier = opinion_evil_tyrant who = PREV }
					opinion = { modifier = opinion_loyal_servant who = PREV }
				}
			}
		}
	}
}
# Undead becomes free
character_event = {
	id = WCUND.1109
	desc = EVTDESC_WCCLS_1109
	picture = GFX_evt_scourge_army

	is_triggered_only = yes
	
	trigger = {
		can_break_scourge_mind_control_trigger = yes
	}
	
	immediate = {
		log = "WCUND.1109 fired for [Root.GetBestName]"
		
		e_scourge = {
			holder_scope = {
				ROOT = {
					# Picks religion to convert to
					if = {
						limit = { religion = PREV }	#Has Lich King's religion
						# If you have secret religion, convert to it
						if = {
							limit = { has_secret_religion = yes }
							secret_religion_scope = { save_event_target_as = target_religion }
						}
						# Convert to religion of your capital
						else_if = {
							limit = {
								is_landed = yes
								capital_scope = {
									evil_public_religion_trigger = no
									is_reformed_religion_trigger = yes
								}
							}
							capital_scope = { religion_scope = { save_event_target_as = target_religion } }
						}
						else = {
							# Fallback
							forsaken_cult = { save_event_target_as = target_religion }
						}
					}
					# Picks culture to convert to
					# Changes culture to Forsaken
					if = {
						limit = {
							OR = {
								culture = scourge
								AND = {
									event_target:target_religion = { dark_public_religion_trigger = yes }
									OR = {
										culture_group = elf_group
										culture_group = human_group
									}
								}
							}
						}
						forsaken = { save_event_target_as = target_culture }
					}
				}
			}
		}
	}

	option = {
		name = EVTOPTA_WCCLS_1109

		set_character_flag = freed_from_lich_king_flag
		e_scourge = {
			show_scope_change = no
			
			holder_scope = {
				show_scope_change = no
				
				ROOT = {
					show_scope_change = no
					
					if = {
						limit = {
							is_ruler = yes
							independent = no
							
							higher_tier_than = BARON
							
							vassal_of = PREV
						}
						set_defacto_liege = THIS
					}
					remove_opinion = { modifier = opinion_loyal_servant who = PREV }
					opinion = { modifier = opinion_evil_tyrant who = PREV }
					
					# Changes religion
					if = {
						limit = { event_target:target_religion = { always = yes } }
						religion = event_target:target_religion
						if = { limit = { has_secret_religion = yes } clear_secret_religion = yes }
					}
					# Changes culture
					if = {
						limit = { event_target:target_culture = { always = yes } }
						culture = event_target:target_culture
					}
					hidden_effect = {
						if = {
							limit = {
								is_landed = yes
								higher_tier_than = BARON
							}
							# Changes religion and culture of your provinces
							any_demesne_province = {
								limit = {
									OR = {
										religion = PREVPREV #Has Lich King's religion
										culture = scourge
									}
								}
								if = {
									limit = { religion = PREVPREV } #Has Lich King's religion
									religion = ROOT
								}
								if = {
									limit = { culture = scourge }
									culture = ROOT
								}
							}
						}
						if = {
							limit = {
								is_ruler = yes
							}
							# Changes religion and culture of your courtiers
							any_courtier_or_vassal = {
								limit = {
									ai = yes
									
									OR = {
										religion = PREVPREV #Has Lich King's religion
										culture = scourge
									}
									can_break_scourge_mind_control_trigger = yes
								}
								if = {
									limit = { religion = PREVPREV } #Has Lich King's religion
									religion = ROOT
								}
								if = {
									limit = { culture = scourge }
									culture = ROOT
								}
							}
						}
					}
				}
			}
		}
		
		ai_chance = {
			factor = 80 # Not 50/50 because the most still prefers to leave the Lich King
		}
	}

	option = {
		trigger = { NOT = { e_scourge = { holder_scope = { war_with = ROOT } } } }
		name = EVTOPTB_WCCLS_1109
		
		ai_chance = {
			factor = 20
			
			evil_ai_chance_score = yes
		}
	}
}

# Removes mind control power (TODO)
# on_yearly_pulse
character_event = {
	id = WCUND.1110

	is_triggered_only = yes
	hide_window = yes
	
	only_playable = yes
	only_independent = yes

	trigger = {
		is_alive = yes
		is_dying = no
		
		OR = {
			has_character_modifier = mind_control_1
			has_character_modifier = mind_control_2
			has_character_modifier = mind_control_3
			has_character_modifier = mind_control_4
		}
		check_variable = { which = mind_control_power value = 1 }
	}

	immediate = {
		remove_3_mind_control_power_effect = yes
	}
}

# Adds mind control power
# on_battle_won_owner
character_event = {
	id = WCUND.1111

	is_triggered_only = yes
	hide_window = yes
	
	only_playable = yes
	only_independent = yes

	trigger = {
		is_alive = yes
		is_dying = no
		
		OR = {
			has_character_modifier = mind_control_1
			has_character_modifier = mind_control_2
			has_character_modifier = mind_control_3
			has_character_modifier = mind_control_4
		}
		NOT = { check_variable = { which = mind_control_power value = 100 } }
	}

	immediate = {
		add_5_mind_control_power_effect = yes
	}
}
# Removes mind control power
# on_battle_lost_owner
character_event = {
	id = WCUND.1112

	is_triggered_only = yes
	hide_window = yes
	
	only_playable = yes
	only_independent = yes

	trigger = {
		is_alive = yes
		is_dying = no
		
		OR = {
			has_character_modifier = mind_control_1
			has_character_modifier = mind_control_2
			has_character_modifier = mind_control_3
			has_character_modifier = mind_control_4
		}
		check_variable = { which = mind_control_power value = 1 }
	}

	immediate = {
		remove_5_mind_control_power_effect = yes
	}
}
#############################################

# If character isn't a dark worshipper, converts to the necromantic religions
character_event = {
	id = WCUND.1301
	desc = EVTDESC_WCUND_1301
	picture = GFX_evt_cemetery

	is_triggered_only = yes

	trigger = {
		NOT = { has_character_flag = necromancy_group_switch_flag }
		
		dark_true_religion_trigger = no
		NOT = { true_religion_group = loa_group }		# Because of Bwonsamdi
	}
	
	immediate = {
		set_character_flag = necromancy_group_switch_flag
	}

	# I will not serve anyone!
	option = {
		name = EVTOPTA_WCUND_1301

		if = {
			limit = {
				OR = {
					is_dark_being_trigger = yes
					liege = { religion = shadowlander }
				}
			}
			if = { limit = { has_secret_religion = yes } clear_secret_religion = yes }
			religion = shadowlander
		}
		else = { set_secret_religion = shadowlander }

		ai_chance = {
			factor = 50
		}
	}

	# I'll serve the Lich King!
	option = {
		trigger = {
			has_global_flag = lich_king_happened
		}
		name = EVTOPTB_WCUND_1301

		if = {
			limit = {
				OR = {
					is_dark_being_trigger = yes
					liege = { religion = death_god }
				}
			}
			if = { limit = { has_secret_religion = yes } clear_secret_religion = yes }
			religion = death_god
		}
		else = { set_secret_religion = death_god }

		ai_chance = {
			factor = 25
			
			evil_ai_chance_score = yes
			evil_ai_chance_religion_score = yes
		}
	}

	# I shall draw my strength from the Blighted Lands!
	option = {
		trigger = {
			OR = {
				culture = drust
				location = { region = world_eastern_kingdoms_kul_tiras }
			}
		}
		name = EVTOPTC_WCUND_1301

		if = {
			limit = {
				OR = {
					is_dark_being_trigger = yes
					liege = { religion = throsic }
				}
			}
			if = { limit = { has_secret_religion = yes } clear_secret_religion = yes }
			religion = throsic
		}
		else = { set_secret_religion = throsic }

		ai_chance = {
			factor = 25
			
			evil_ai_chance_score = yes
			evil_ai_chance_religion_score = yes
		}
	}
	
	option = {
		name = I_WILL_NOT_BETRAY_RELIGION
		
		piety = -100
		
		ai_chance = {
			factor = 0
		}
	}
}

#############################
#		Random events					#
#############################
### Random Necromantic events
character_event = {
	id = WCUND.9900

	is_triggered_only = yes
	hide_window = yes

	min_age = 16
	only_playable = yes
	only_capable = yes
	prisoner = no

	trigger = {
		is_alive = yes
		is_dying = no

		can_be_undead_trigger = yes
	}

	weight_multiplier = {
		days = 1
		modifier = {
			factor = 2
			OR = {
				is_death_knight_class_trigger = yes
				is_necromancer_class_trigger = yes
				true_religion_group = necromancy_group
			}
		}
		modifier = {
			factor = 1.6
			trait = cynical
		}
		modifier = {
			factor = 1.6
			trait = being_undead
		}
		modifier = {
			factor = 1.2
			trait = ambitious
		}
		modifier = {
			factor = 1.2
			is_mage_class_trigger = yes
		}
	}

	immediate = {
		random_list = {
			10 = {
				trigger = {
					is_inaccessible_trigger = no
					
					NOT = { has_character_flag = lich_king_vision_happend_flag }	# Happens once in lifetime
					
					lich_king_vision_trigger = yes
				}
				set_character_flag = lich_king_vision_happend_flag
				
				character_event = { id = WCUND.9910 }	# Lich King vision
			}
		}
	}
}

### Lich King vision ###
### Travel to Frozen Throne?
character_event = {
	id = WCUND.9910
	desc = EVTDESC_WCUND_9910
	picture = GFX_evt_icecrown
	border = GFX_event_normal_frame_intrigue
	
	is_triggered_only = yes
	
	immediate = {
		add_trait = travelling
	}
	
	# Travel to Frozen Throne
	option = {
		name = EVTOPTA_WCUND_9910
		
		character_event = { id = WCUND.9915 days = 15 random = 15 }
		
		ai_chance = {
			factor = 50
			
			evil_ai_chance_score = yes
			evil_ai_chance_religion_score = yes
		}
	}
	# No thanks
	option = {
		name = EVTOPTB_WCUND_9910
		
		remove_trait = travelling
		
		ai_chance = {
			factor = 50
		}
	}
}
### Blizzard
character_event = {
	id = WCUND.9915
	desc = EVTDESC_WCUND_9915
	picture = GFX_evt_scourge_army
	border = GFX_event_normal_frame_intrigue
	
	is_triggered_only = yes
	
	trigger = {
		lich_king_vision_trigger = yes
	}
	
	fail_trigger_effect = {
		# Travel failed
		character_event = { id = WCUND.9920 }
	}
	
	immediate = {
		e_scourge = {
			holder_scope = {
				save_event_target_as = target_lich_king
			}
		}
	}
	
	# Bow to Death God
	option = {
		name = EVTOPTA_WCUND_9915
		
		set_secret_religion = event_target:target_lich_king
		
		remove_trait = travelling
	}
	# I prefer death
	option = {
		name = EVTOPTB_WCUND_9915
		
		death = { death_reason = death_vanished }
		
		ai_chance = {
			factor = 0
		}
	}
}
### Travel failed
character_event = {
	id = WCUND.9920
	desc = EVTDESC_WCUND_9920
	picture = GFX_evt_icecrown
	border = GFX_event_normal_frame_intrigue
	
	is_triggered_only = yes
	
	option = {
		name = ALAS
		
		remove_trait = travelling
	}
}