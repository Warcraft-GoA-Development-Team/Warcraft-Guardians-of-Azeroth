namespace = WCRAC
# Long-lived characters dies of old age/illness
character_event = {
	id = WCRAC.1
	desc = "EVTDESC_WCRAC_1"
	picture = "GFX_evt_recovery"

	min_age = 100
	
	hide_window = yes
	
	trigger = {
		age = 100
		is_completely_immortal_trigger = no
		# Add here new races whose lifespan is less than 10000 years
		OR = {
			# Races
			trait = creature_dwarf
			trait = creature_gnome
			is_high_elf_trigger = yes
			trait = creature_naga
			trait = creature_vrykul
			trait = creature_giant
			trait = creature_night_elf
			trait = creature_highborne
			trait = creature_mogu
			trait = creature_mantid
			# Classes
			# has_5_6_magic_class_or_higher_trigger = yes
			# has_7_8_magic_class_or_higher_trigger = yes
			has_9_10_magic_class_trigger = yes
		}
	}

	mean_time_to_happen = {
		years = 100
		# Race modifiers
		# Note: don't forget to change average_lifespan, text_effect_average_lifespan_immortality, is_old_immortal_physical_age_trigger everywhere when you touch these modifiers
		modifier = {
			factor = 1.5
			trait = creature_dwarf
		}
		modifier = {
			factor = 2
			trait = creature_gnome
		}
		modifier = {
			factor = 9
			is_high_elf_trigger = yes
		}
		modifier = {
			factor = 14
			trait = creature_naga
		}
		modifier = {
			factor = 1.5
			trait = creature_vrykul
		}
		modifier = {
			factor = 7
			trait = creature_giant
		}
		modifier = {
			factor = 14
			trait = creature_night_elf
		}
		modifier = {
			factor = 14
			trait = creature_highborne
		}
		modifier = {
			factor = 1.5
			trait = creature_mogu
		}
		modifier = {
			factor = 1.5
			trait = creature_mantid
		}
		# Health modifiers
		modifier = {
			factor = 0.84
			NOT = { health = 2 }
		}
		modifier = {
			factor = 0.84
			NOT = { health = 3 }
		}
		modifier = {
			factor = 0.84
			NOT = { health = 4 }
		}
		modifier = {
			factor = 0.84
			NOT = { health = 5 }
		}
		modifier = {
			factor = 1.1
			health = 6
		}
		modifier = {
			factor = 1.1
			health = 7
		}
		modifier = {
			factor = 1.1
			health = 8
		}
		modifier = {
			factor = 1.1
			health = 9
		}
		modifier = {
			factor = 0.1
			is_incapable = yes
		}
		modifier = {
			factor = 0.1
			trait = infirm
		}
		modifier = {
			factor = 0.1
			is_ill = yes
		}
		modifier = {
			factor = 0.1
			has_injury_trigger = yes
		}
	}
	
	immediate = {
		if = {
			limit = {
				OR = {
					is_ill = yes
					has_injury_trigger = yes
				}
			}
			death = { death_reason = death_trait }
		}
		else = {
			death_natural_effect = yes
		}
	}
}

# on_employer_change
character_event = {
	id = WCRAC.5
	
	is_triggered_only = yes
	hide_window = yes
	
	trigger = {
		is_alive = yes
		is_dying = no
		
		FROM = { character = no }
		NOT = { has_character_flag = race_delay_flag }
		
		has_race_trait_trigger = no
	}
	
	immediate = {
		# log = "WCRAC.5 fired for [Root.GetBestName]"
		
		character_event = { id = WCRAC.10 }
	}
}
# Adds race traits
# Fired by decision, on_birth, on_new_holder, on_new_holder_inheritance, on_new_holder_usurpation
character_event = {
	id = WCRAC.10

	hide_window = yes
	is_triggered_only = yes

	trigger = {
		is_alive = yes
		is_dying = no
		
		# potential_race_trigger = yes
		has_race_trait_trigger = no
	}

	immediate = {
		# log = "WCRAC.10 fired for [Root.GetBestName]"
		true_father_even_if_dead = { save_event_target_as = target_father }
		mother_even_if_dead = { save_event_target_as = target_mother }
		
		set_character_flag = no_show_what_become_flag		# Cancel show_close_people_what_this_become_effect if character spawned as undead, demon, void being
		set_character_flag = no_religion_change_flag		# Cancel event religion change

		# Children born in prison take warden's religion and culture
		# It's hardcoded vanilla mechanic, but it can't be like that in Warcraft setting, so here we go
		# Picks mother's religion and culture if child is born in prison
		if = {
			limit = {
				NOT = { age = 1 }
				prisoner = yes
				event_target:target_mother = { always = yes }
			}
			religion = event_target:target_mother
			culture = event_target:target_mother
		}

		# Picks graphical culture
		if = {
			limit = {
				NOT = { age = 1 }
				event_target:target_father = { always = yes }
				event_target:target_mother = { always = yes }
			}
			# If father is infertile or dead, always picks mother's graphical culture
			if = {
				limit = {
					event_target:target_father = {
						OR = {
							is_alive = no
							can_has_children_trigger = no
						}
					}
				}
				log = "[Root.GetBestName] picks mother's race because of father is infertile or dead"

				event_target:target_mother = { ROOT = { set_prev_gfx_effect = yes } }
			}
			# Halfbreed child was born, picks graphical culture
			else_if = {
				limit = {
					NOT = {
						has_game_rule = {
							name = halfbreed_race
							value = random
						}
					}

					event_target:target_father = { event_target:target_mother = { has_prev_race_trigger = no } }
				}
				if = {
					limit = {
						has_game_rule = {
							name = halfbreed_race
							value = father
						}
					}
					log = "[Root.GetBestName] picks father's race because of Father rule"
					
					event_target:target_father = { ROOT = { set_prev_gfx_effect = yes } }
				}
				else_if = {
					limit = {
						has_game_rule = {
							name = halfbreed_race
							value = mother
						}
					}
					log = "[Root.GetBestName] picks mother's race because of Mother rule"
					
					event_target:target_mother = { ROOT = { set_prev_gfx_effect = yes } }
				}
				# If child has mother's dynasty, picks mother's graphical culture
				else_if = {
					limit = { dynasty = event_target:target_father }
					log = "[Root.GetBestName] picks father's race because of Dynasty rule"
					
					event_target:target_father = { ROOT = { set_prev_gfx_effect = yes } }
				}
				else = {
					log = "[Root.GetBestName] picks mother's race because of Dynasty rule"
					
					event_target:target_mother = { ROOT = { set_prev_gfx_effect = yes } }
				}
			}
		}
		
		# Add new races always at the end
		if = {
			limit = { potential_race_human_trigger = yes }
			add_trait = creature_human
		}
		else_if = {
			limit = { potential_race_orc_trigger = yes }
			add_trait = creature_orc
		}
		else_if = {
			limit = { potential_race_ogre_trigger = yes }
			add_trait = creature_ogre
			if = {
				limit =  { graphical_culture = twoheadedogregfx }
				add_trait = twoheaded
			}
			else = {
				random = {
					chance = 5
					add_trait = twoheaded
					set_graphical_culture = twoheadedogre
				}
			}
		}
		else_if = {
			limit = { potential_race_troll_trigger = yes }
			add_trait = creature_troll
		}
		else_if = {
			limit = { potential_race_murloc_trigger = yes }
			add_trait = creature_murloc
		}
		else_if = {
			limit = { potential_race_gnoll_trigger = yes }
			add_trait = creature_gnoll
		}
		else_if = {
			limit = { potential_race_kobold_trigger = yes }
			add_trait = creature_kobold
		}
		else_if = {
			limit = { potential_race_dwarf_trigger = yes }
			add_trait = creature_dwarf
		}
		else_if = {
			limit = { potential_race_gnome_trigger = yes }
			add_trait = creature_gnome
		}
		else_if = {
			limit = { potential_race_high_elf_trigger = yes }
			add_trait = creature_high_elf
		}
		else_if = {
			limit = { potential_race_blood_elf_trigger = yes }
			add_trait = creature_blood_elf
		}
		else_if = {
			limit = { potential_race_naga_trigger = yes }
			add_trait = creature_naga
			add_trait_void_creature_effect = yes
		}
		else_if = {
			limit = {
				OR = {
					potential_race_red_dragon_trigger = yes
					potential_race_blue_dragon_trigger = yes
					potential_race_green_dragon_trigger = yes
					potential_race_black_dragon_trigger = yes
					potential_race_bronze_dragon_trigger = yes
					potential_race_infinite_dragon_trigger = yes
				}
			}
			character_event = { id = WCDRA.150 }
		}
		else_if = {
			limit = { potential_race_goblin_trigger = yes }
			add_trait = creature_goblin
		}
		else_if = {
			limit = { potential_race_gilblin_trigger = yes }
			add_trait = creature_gilblin
		}
		else_if = {
			limit = { potential_race_pygmy_trigger = yes }
			add_trait = creature_pygmy
		}
		else_if = {
			limit = { potential_race_hozen_trigger = yes }
			add_trait = creature_hozen
		}
		else_if = {
			limit = { potential_race_draenei_trigger = yes }
			add_trait = creature_draenei
		}
		else_if = {
			limit = { potential_race_arakkoa_corrupted_trigger = yes }
			add_trait = creature_arakkoa_corrupted
		}
		# else_if = {
			# limit = { potential_race_ghoul_trigger = yes }
			# add_trait = creature_ghoul
			# add_trait_undead_effect = yes
		# }
		else_if = {
			limit = { potential_race_wraith_trigger = yes }
			add_trait = creature_wraith
			add_trait_undead_effect = yes
		}
		else_if = {
			limit = { potential_race_banshee_trigger = yes }
			add_trait = creature_banshee
			add_trait_undead_effect = yes
		}
		else_if = {
			limit = { potential_race_plague_eruptor_trigger = yes }
			add_trait = creature_plague_eruptor
			add_trait_undead_effect = yes
		}
		else_if = {
			limit = { potential_race_abomination_trigger = yes }
			add_trait = creature_abomination
			add_trait_undead_effect = yes
		}
		else_if = {
			limit = { potential_race_lich_trigger = yes }
			add_trait = creature_lich
			add_trait_undead_effect = yes
		}
		else_if = {
			limit = { potential_race_wickerman_trigger = yes }
			add_trait = creature_wickerman
			add_trait_undead_effect = yes
		}
		else_if = {
			limit = { potential_race_wicker_behemoth_trigger = yes }
			add_trait = creature_wicker_behemoth
			add_trait_undead_effect = yes
		}
		else_if = {
			limit = { potential_race_wicker_golem_trigger = yes }
			add_trait = creature_wicker_golem
			add_trait_undead_effect = yes
		}
		else_if = {
			limit = { potential_race_annihilan_trigger = yes }
			add_trait = creature_annihilan
			add_trait_demon_effect = yes
			if = {
				limit = { culture = shivarra }
				culture = annihilan 
			}
		}
		else_if = {
			limit = { potential_race_nathrezim_trigger = yes }
			add_trait = creature_nathrezim
			add_trait_demon_effect = yes
			if = {
				limit = { culture = sayaadi }
				culture = nathrezim
			}
		}
		else_if = {
			limit = { potential_race_eredruin_trigger = yes }
			add_trait = creature_eredruin
			add_trait_demon_effect = yes
		}
		else_if = {
			limit = { potential_race_fel_orc_trigger = yes }
			add_trait = creature_fel_orc
		}
		else_if = {
			limit = { potential_race_felblood_elf_trigger = yes }
			add_trait = creature_felblood_elf
		}
		else_if = {
			limit = { potential_race_satyr_trigger = yes }
			add_trait = creature_satyr
			add_trait_demon_effect = yes
		}
		else_if = {
			limit = { potential_race_eredar_trigger = yes }
			add_trait = creature_eredar
			add_trait_demon_effect = yes
		}
		else_if = {
			limit = { potential_race_sayaadi_trigger = yes }
			add_trait = creature_sayaadi
			add_trait_demon_effect = yes
			if = {
				limit = { culture = nathrezim }
				culture = sayaadi 
			}
		}
		else_if = {
			limit = { potential_race_shivarra_trigger = yes }
			add_trait = creature_shivarra
			add_trait_demon_effect = yes
			if = {
				limit = { culture = annihilan }
				culture = shivarra 
			}
		}
		else_if = {
			limit = { potential_race_moarg_trigger = yes }
			add_trait = creature_moarg
			add_trait_demon_effect = yes
		}
		else_if = {
			limit = { potential_race_observer_trigger = yes }
			add_trait = creature_observer
			add_trait_demon_effect = yes
		}
		else_if = {
			limit = { potential_race_air_elemental_trigger = yes }
			add_trait = creature_air_elemental
		}
		else_if = {
			limit = { potential_race_earth_elemental_trigger = yes }
			add_trait = creature_earth_elemental
		}
		else_if = {
			limit = { potential_race_fire_elemental_trigger = yes }
			add_trait = creature_fire_elemental
		}
		else_if = {
			limit = { potential_race_flamewaker_trigger = yes }
			add_trait = creature_flamewaker
		}
		else_if = {
			limit = { potential_race_water_elemental_trigger = yes }
			add_trait = creature_water_elemental
		}
		else_if = {
			limit = { potential_race_iron_dwarf_trigger = yes }
			add_trait = creature_iron_dwarf
		}
		else_if = {
			limit = { potential_race_vrykul_trigger = yes }
			add_trait = creature_vrykul
			# if = {
				# limit = {
					# OR = {
						# is_ruler = no
						# tier = BARON
					# }
					# top_liege = { trait = sleeping_trait }
				# }
				# add_trait = sleeping_trait
			# }
		}
		else_if = {
			limit = { potential_race_tuskarr_trigger = yes }
			add_trait = creature_tuskarr
		}
		else_if = {
			limit = { potential_race_magnataur_trigger = yes }
			add_trait = creature_magnataur
		}
		else_if = {
			limit = { potential_race_furbolg_trigger = yes }
			add_trait = creature_furbolg
		}
		else_if = {
			limit = { potential_race_gorloc_trigger = yes }
			add_trait = creature_gorloc
		}
		else_if = {
			limit = { potential_race_watcher_trigger = yes }
			add_trait = creature_watcher
		}
		else_if = {
			limit = { potential_race_wolvar_trigger = yes }
			add_trait = creature_wolvar
		}
		else_if = {
			limit = { potential_race_taunka_trigger = yes }
			add_trait = creature_taunka
		}
		else_if = {
			limit = { potential_race_kvaldir_trigger = yes }
			add_trait = creature_kvaldir
			add_trait_undead_effect = yes
		}
		else_if = {
			limit = { potential_race_nerubian_trigger = yes }
			add_trait = creature_nerubian
		}
		else_if = {
			limit = { potential_race_harpy_trigger = yes }
			add_trait = creature_harpy
		}
		else_if = {
			limit = { potential_race_mechagnome_trigger = yes }
			add_trait = creature_mechagnome
		}
		else_if = {
			limit = { potential_race_earthen_trigger = yes }
			add_trait = creature_earthen
		}
		else_if = {
			limit = { potential_race_giant_trigger = yes }
			add_trait = creature_giant
		}
		else_if = {
			limit = { potential_race_nraqi_trigger = yes }
			add_trait = creature_nraqi
			add_trait_void_creature_effect = yes
		}
		else_if = {
			limit = { potential_race_cthraxxi_trigger = yes }
			add_trait = creature_cthraxxi
			add_trait_void_creature_effect = yes
		}
		else_if = {
			limit = { potential_race_night_elf_trigger = yes }
			add_trait = creature_night_elf
		}
		else_if = {
			limit = { potential_race_tauren_trigger = yes }
			add_trait = creature_tauren
		}
		else_if = {
			limit = { potential_race_centaur_trigger = yes }
			add_trait = creature_centaur
		}
		else_if = {
			limit = { potential_race_quilboar_trigger = yes }
			add_trait = creature_quilboar
		}
		else_if = {
			limit = { potential_race_tolvir_trigger = yes }
			add_trait = creature_tolvir
		}
		else_if = {
			limit = { potential_race_qiraji_trigger = yes }
			add_trait = creature_qiraji
			add_trait_void_creature_effect = yes
			
			# Qiraji can pick only C'Thun
			if = {
				limit = { is_locked_qiraji_trigger = yes }
				add_character_modifier = {
					name = follower_of_cthun
					duration = -1
				}
			}
		}
		else_if = {
			limit = { potential_race_dryad_trigger = yes }
			add_trait = creature_dryad
		}
		else_if = {
			limit = { potential_race_frostnymph_trigger = yes }
			add_trait = creature_frostnymph
		}
		else_if = {
			limit = { potential_race_highborne_trigger = yes }
			add_trait = creature_highborne
		}
		else_if = {
			limit = { potential_race_vulpera_trigger = yes }
			add_trait = creature_vulpera
		}
		else_if = {
			limit = { potential_race_sethrak_trigger = yes }
			add_trait = creature_sethrak
		}
		else_if = {
			limit = { potential_race_protector_trigger = yes }
			add_trait = creature_protector 
		}
		else_if = {
			limit = { potential_race_ancient_war_trigger = yes }
			add_trait = creature_ancient_war
			culture = protector
		}
		else_if = {
			limit = { potential_race_ancient_lore_trigger = yes }
			add_trait = creature_ancient_lore
			culture = protector
		}
		else_if = {
			limit = { potential_race_ancient_wind_trigger = yes }
			add_trait = creature_ancient_wind
			culture = protector
		}
		else_if = {
			limit = { potential_race_ancient_coral_trigger = yes }
			add_trait = creature_ancient_coral
		}
		else_if = {
			limit = { potential_race_pandaren_trigger = yes }
			add_trait = creature_pandaren
		}
		else_if = {
			limit = { potential_race_jinyu_trigger = yes }
			add_trait = creature_jinyu
		}
		else_if = {
			limit = { potential_race_ankoan_trigger = yes }
			add_trait = creature_ankoan
		}
		else_if = {
			limit = { potential_race_mogu_trigger = yes }
			add_trait = creature_mogu
		}
		else_if = {
			limit = { potential_race_saurok_trigger = yes }
			add_trait = creature_saurok
		}
		else_if = {
			limit = { potential_race_grummle_trigger = yes }
			add_trait = creature_grummle
		}
		else_if = {
			limit = { potential_race_mantid_trigger = yes }
			add_trait = creature_mantid
			add_trait_void_creature_effect = yes
		}
		else_if = {
			limit = { potential_race_yaungol_trigger = yes }
			add_trait = creature_yaungol
		}
		else_if = {
			limit = { potential_race_stone_tolvir_trigger = yes }
			add_trait = creature_stone_tolvir
		}
		else = {
			gfx_culture_scope = { save_event_target_as = target_gfx_culture }
			log = "(IMPORTANT) [This.GetBestName] couldn't get race trait. GFX culture is [target_gfx_culture.GetName]."
			clear_event_target = target_gfx_culture
			if = {
				limit = { has_character_flag = last_race_try_flag }
				death = { death_reason = death_missing }
				break = yes
			}
			set_character_flag = last_race_try_flag
			
			dynasty_head = { ROOT = { set_prev_gfx_effect = yes } }
			repeat_event = { id = WCRAC.10 }
			break = yes
		}
		
		# Adds blood trait
		add_blood_trait_effect = yes
		
		# Changes gender
		if = {
			limit = {
				is_female = yes
				is_only_male_race_trigger = yes
			}
			set_gender = male
		}
		else_if = {
			limit = {
				is_female = no
				is_only_female_race_trigger = yes
			}
			set_gender = female
		}
		
		# Adds undead trait
		if = {
			limit = {
				NOT = { trait = being_undead }
				
				OR = {
					has_undead_gfx_trigger = yes
					AND = {
						can_be_undead_trigger = yes
						location = { has_province_modifier = undead_province }
						liege = { trait = being_undead }
					}
				}
			}
			save_event_target_as = target_necromancer
			character_event = { id = WCPOD.5013 }
		}
		# Adds demon trait
		if = {
			limit = {
				NOT = { trait = being_demon }
				
				has_demon_gfx_trigger = yes
			}
			add_trait_demon_effect = yes
		}
		
		# Adds tattoos
		add_random_tattoo_effect = yes
		
		# Adds default traits when new character spawns
		add_default_traits = yes
		# Adds religious branch
		if = {
			limit = { religion_has_branches_trigger = yes }
			liege = { ROOT = { add_prev_religious_branch_or_random_effect = yes } }
		}
		
		# Fixes immortal age
		add_age_back_effect = yes
		
		clr_character_flag = no_show_what_become_flag			# Works only during this event
		clr_character_flag = no_religion_change_flag			# Works only during this event

		clr_character_flag = race_delay_flag					# Race trait is added, so no longer needed
	}
}

# Fixes child portraits of immortal characters
character_event = {
	id = WCRAC.200
	
	is_triggered_only = yes
	hide_window = yes
	
	min_age = 16
	
	trigger = {
		age = 16
	}
	
	immediate = {
		log = "WCRAC.200 fired for [Root.GetBestName]"
		
		remove_racial_traits_effect = yes
		remove_class_trait_effect = yes
		character_event = { id = WCRAC.10 }
		add_class_trait_effect = yes
	}
}

# New ancient born
character_event = {
	id = WCRAC.310
	desc = EVTDESC_WCRAC.310
	picture = GFX_evt_emerald_dream
	border = GFX_event_normal_frame_diplomacy
	
	is_triggered_only = yes
	
	trigger = {
		is_playable = yes
		
		AND = {
			is_plant_race_trigger = yes
			NOT = { trait = creature_ancient_coral }
		}
		
		has_artifact = ancient_kernel
	}
	
	immediate = {
		destroy_artifact = ancient_kernel
		create_character = {
			dynasty = ROOT
			religion = ROOT
			culture = ROOT
			female = 50
			age = 0
			flag = race_delay_flag
		}
		new_character = {
			random_list = {
				10 = { set_graphical_culture = protector }
				10 = { set_graphical_culture = ancient_war }
				10 = { set_graphical_culture = ancient_lore }
				10 = { set_graphical_culture = ancient_wind }
			}
			character_event = { id = WCRAC.10 } 	# Adds race trait
			
			if = {
				limit = { ROOT = { is_female = yes } }
				set_mother = ROOT
			}
			else = {
				set_father = ROOT
			}
		}
	}
	
	option = {
		name = EVTOPTA_WCRAC.310
	}
}
# Destory Ancients seed after death
character_event = {
	id = WCRAC.320

	is_triggered_only = yes
	hide_window = yes

	trigger = {
		has_artifact = ancient_kernel
	}

	immediate = {
		destroy_artifact = ancient_kernel
	}
}

# on_marriage
# Marriages make infertile :3
character_event = {
	id = WCRAC.395
	
	is_triggered_only = yes
	hide_window = yes
	
	trigger = {
		FROM = { need_infertile_trait_trigger = yes }
	}
	
	immediate = {
		FROM = { character_event = { id = WCRAC.400 months = 1 random = 60 } }
	}
}
# on_birth
# Child makes parents infertile :3
character_event = {
	id = WCRAC.399
	
	is_triggered_only = yes
	hide_window = yes
	
	immediate = {
		true_father = {
			if = {
				limit = {
					need_infertile_trait_trigger = yes
				}
				character_event = { id = WCRAC.400 months = 1 random = 60 }
			}
		}
		mother = {
			if = {
				limit = {
					need_infertile_trait_trigger = yes
				}
				character_event = { id = WCRAC.400 months = 1 random = 60 }
			}
		}
	}
}
# Becomes infertile
character_event = {
	id = WCRAC.400
	desc = EVTDESC_WCRAC_400
	picture = GFX_evt_marriage
	border = GFX_event_normal_frame_religion
	
	is_triggered_only = yes
	
	hide_from = yes
	
	trigger = {
		need_infertile_trait_trigger = yes
	}
	
	immediate = {
		add_trait = infertile
	}
	
	option = {
		name = ALAS
		
		tooltip = {
			add_trait = infertile
		}
	}
}

### Spiritbinding
# Starts building new vessel, picks rock
character_event = {
	id = WCRAC.500
	desc = EVTDESC_WCRAC_500
	picture = GFX_evt_jade_mogu_golem
	border = GFX_event_normal_frame_religion
	
	is_triggered_only = yes
	
	#Soft
	option = {
		name = EVTOPTA_WCRAC_500
		
		random_list = {
			10 = {
				custom_tooltip = {
					text = spiritbinding_deformed_body_tooltip
					set_character_flag = spiritbinding_deformed_body_flag
				}
			}
			10 = {
				custom_tooltip = {
					text = spiritbinding_excellent_body_tooltip
					set_character_flag = spiritbinding_excellent_body_flag
				}
			}
			80 = {
			}
		}
	}
	#Hard
	option = {
		name = EVTOPTB_WCRAC_500
		
		random_list = {
			30 = {
				custom_tooltip = {
					text = spiritbinding_deformed_body_tooltip
					set_character_flag = spiritbinding_deformed_body_flag
				}
			}
			30 = {
				custom_tooltip = {
					text = spiritbinding_excellent_body_tooltip
					set_character_flag = spiritbinding_excellent_body_flag
				}
			}
			40 = {
			}
		}
	}
	after = {
		character_event = { id = WCRAC.505 months = 6 random = 180 }
	}
}
#Body is ready
character_event = {
	id = WCRAC.505
	desc = EVTDESC_WCRAC_505
	picture = GFX_evt_jade_mogu_golem
	border = GFX_event_normal_frame_religion
	
	is_triggered_only = yes
	
	#Begin the ritual
	option = {
		name = {
			trigger = { NOT = { has_character_flag = spiritbinding_deformed_body_flag } }
			text = EVTOPTA_WCRAC_505_normal
		}
		name = {
			trigger = { has_character_flag = spiritbinding_deformed_body_flag }
			text = EVTOPTA_WCRAC_505_fail
		}
		
		random_list = {
			90 = {
				custom_tooltip = {
					text = spiritbinding_soul_transferred_tooltip
				}
			}
			10 = {
				custom_tooltip = {
					text = spiritbinding_soul_trapped_tooltip
					set_character_flag = spiritbinding_soul_trapped_flag
				}
			}
		}
		
		character_event = { id = WCRAC.510 days = 3 }
	}
	#Stop it
	option = {
		name = {
			trigger = { NOT = { has_character_flag = spiritbinding_deformed_body_flag } }
			text = EVTOPTB_WCRAC_505_normal
		}
		name = {
			trigger = { has_character_flag = spiritbinding_deformed_body_flag }
			text = EVTOPTB_WCRAC_505_fail
		}
		
		clear_flags_with_prefix = spiritbinding_
	}
}
#Ritual begins
character_event = {
	id = WCRAC.510
	desc = EVTDESC_WCRAC_510
	picture = GFX_evt_jade_mogu_golem
	border = GFX_event_normal_frame_religion
	
	is_triggered_only = yes
	
	#You died
	option = {
		trigger = { has_character_flag = spiritbinding_soul_trapped_flag }
		name = EVTOPTA_WCRAC_510
		
		death = { death_reason = death_accident }
	}
	#Got new body
	option = {
		trigger = { NOT = { has_character_flag = spiritbinding_soul_trapped_flag } }
		name = EXCELLENT
		
		get_new_body_effect = yes
		
		if = {
			limit = { has_character_flag = spiritbinding_deformed_body_flag }
			add_trait = weak
		}
		if = {
			limit = { has_character_flag = spiritbinding_excellent_body_flag }
			add_trait = strong
		}
	}
	
	after = {
		clear_flags_with_prefix = spiritbinding_
	}
}

### Mantid Paragons ###
### The Klaxxi pick paragons
character_event = {
	id = WCRAC.1000
	
	is_triggered_only = yes
	hide_window = yes
	
	only_playable = yes
	religion = old_gods_worship
	
	trigger = {
		is_playable = yes
		
		religion = old_gods_worship
		
		has_landed_title = d_klaxxi
	}
	
	immediate = {
		any_playable_ruler = {
			limit = {
				#NOT = { character = ROOT } # Can't pick themselves	#Doesn't ignore you if you fire it via console
				NOT = { has_character_flag = mantid_paragon_happend_flag }
				
				is_worth_to_be_mantid_paragon_trigger = yes
			}
			count = 1
			score_value = {
				value = 0
				has_diplomacy_5_per_5_positive_score = yes
				has_martial_5_per_5_positive_score = yes
				has_stewardship_5_per_5_positive_score = yes
				has_intrigue_5_per_5_positive_score = yes
				has_learning_5_per_5_positive_score = yes
				has_combat_rating_10_per_5_positive_score = yes
			}
			
			log = "(MANTID) [This.GetBestName] is picked to be paragon"
			
			set_character_flag = mantid_paragon_happend_flag #Once in life
			
			character_event = { id = WCRAC.1005 days = 3 random = 27 }
		}
	}
}
### The Klaxxi want you to be a paragon
character_event = {
	id = WCRAC.1005
	title = EVTTITLE_WCRAC_1005
	desc = EVTDESC_WCRAC_1005
	picture = GFX_evt_emissary
	border = GFX_event_normal_frame_religion
	
	is_triggered_only = yes
	
	trigger = {
		is_worth_to_be_mantid_paragon_trigger = yes
	}
	
	#The honour is mine.
	option = {
		name = EVTOPTA_WCRAC_1005
		
		character_event = { id = WCRAC.1010 days = 3 }
	}
	#I'm sorry, but my people need me here.
	option = {
		name = EVTOPTB_WCRAC_1005
		
		ai_chance = {
			factor = 0
		}
	}
}
### The ritual begins, your ambersmith is killed
long_character_event = {
	id = WCRAC.1010
	title = EVTTITLE_WCRAC_1005
	desc = EVTDESC_WCRAC_1010
	picture = GFX_evt_emissary
	border = GFX_event_long_frame_religion
	
	is_triggered_only = yes
	
	trigger = {
		is_worth_to_be_mantid_paragon_trigger = yes
	}
	
	immediate = {
		hidden_effect = {
			save_event_target_as = target_paragon
		}
	}
	
	#So wake me up when it's all over...
	option = {
		name = EVTOPTA_WCRAC_1010
		
		add_character_modifier = { name = recently_became_paragon_cooldown years = 50 hidden = yes }
		
		add_trait = mantid_paragon
		put_to_sleep_paragon_effect = yes
		if = {
			limit = { NOT = { any_owned_bloodline = { has_character_flag = weak_earned_bloodline } } }
			if = { 
				limit = { is_female = no }
				create_bloodline = { type = mantid_paragon_bloodline }		
			}
			else = {
				create_bloodline = { type = mantid_paragon_bloodline inheritance = matrilineal }		
			}
		}
		if = {
			limit = { has_nickname = no }
			assign_random_mantid_paragon_nickname_effect = yes
		}
		
		current_heir = {
			show_scope_change = no
			save_event_target_as = target_new_ruler
			
			ROOT = {
				show_scope_change = no
				
				this_abdicate_transfer_wealth_to_prev_effect = yes
			}
		}
		
		hidden_effect = {
			any_player = {
				limit = {
					religion = old_gods_worship
					culture = mantid
					
					NOT = {
						character = ROOT
						character = event_target:target_new_ruler
					}
				}
				character_event = { id = WCRAC.1013 }
			}
		}
	}
}
### Notification: the Klaxxi has chosen her/him to be a paragon
character_event = {
	id = WCRAC.1013
	title = EVTTITLE_WCRAC_1013
	desc = EVTDESC_WCRAC_1013
	picture = GFX_evt_emissary
	border = GFX_event_normal_frame_religion
	portrait = event_target:target_paragon
	
	is_triggered_only = yes
	
	option = {
		name = INTERESTING
	}
}
### The Klaxxi reawakes the paragon
#Delayer event
character_event = {
	id = WCRAC.1015
	
	is_triggered_only = yes
	hide_window = yes
	
	trigger = {
		NOT = { has_character_flag = awaken_paragon_ongoing_flag }
	}
	
	immediate = {
		set_character_flag = awaken_paragon_ongoing_flag
		
		character_event = { id = WCRAC.1019 }
	}
}
#Delayed event
character_event = {
	id = WCRAC.1019
	
	is_triggered_only = yes
	hide_window = yes
	
	trigger = {
		is_ruler = no
		
		trait = sleeping_trait
		has_character_flag = paragon_sleeping_flag
		
		liege = {
			religion = old_gods_worship
			culture = mantid
		}
	}
	
	fail_trigger_effect = {
		death = { death_reason = death_accident }
	}
	
	immediate = {
		save_event_target_as = target_paragon
		
		liege = { character_event = { id = WCRAC.1020 } }
	}
}
#Pinged event
character_event = {
	id = WCRAC.1020
	title = EVTTITLE_WCRAC_1005
	desc = EVTDESC_WCRAC_1020
	picture = GFX_evt_emissary
	border = GFX_event_normal_frame_religion
	
	is_triggered_only = yes
	
	option = {
		name = EVTOPTA_WCRAC_1020
		
		event_target:target_paragon = {
			show_scope_change = no
			
			if = {
				limit = { prisoner = yes }
				imprison = no
			}
			
			awaken_paragon_effect = yes
			
			move_character = ROOT
		}
		
		ai_chance = {
			factor = 1
		}
	}
	option = {
		trigger = { dynasty = event_target:target_paragon }
		name = EVTOPTB_WCRAC_1020
		
		event_target:target_paragon = {
			show_scope_change = no
			
			if = {
				limit = { prisoner = yes }
				imprison = no
			}
			
			awaken_paragon_effect = yes
			
			move_character = ROOT
			
			ROOT = {
				show_scope_change = no
				
				this_abdicate_transfer_wealth_to_play_prev_effect = yes
			}
		}
		
		ai_chance = {
			factor = 99
			modifier = {
				factor = 0
				trait = mantid_paragon
			}
		}
	}
	
	after = {
		FROM = { clr_character_flag = awaken_paragon_ongoing_flag }
	}
}